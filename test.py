async def excel_report_type_handler(callback_query_or_message, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "üìä –û—Ç—á–µ—Ç –≤ excel" excel_report –∏–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é
    :param callback_query_or_message:
    :param state:
    :return: Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º 30 –¥–Ω–µ–π
    """
    try:
        message_id = callback_query_or_message.message.message_id
    except:
        message_id = callback_query_or_message.message_id

    try:
        for i in range(2):
            await callback_query_or_message.bot.delete_message(
                callback_query_or_message.from_user.id,
                message_id - i
            )
    except:
        pass

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting_for_term
    await MyStates.excel_waiting_for_term.set()

    # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è: –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (1-30 –¥–Ω–µ–π):
    msg = config['msg']['term']

    await callback_query_or_message.bot.send_message(
        callback_query_or_message.from_user.id,
        msg,
        reply_markup=button
    )



#async def excel_chosen_term_handler(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é "üìä –û—Ç—á–µ—Ç –≤ excel" –≤—ã–±—Ä–∞–ª —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç—á–µ—Ç–∞ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å(1-31).
    :param message:
    :param state:
    :return:
    """
#    all_data = await state.get_data()
#    str_numbers = [str(i) for i in range(1, 31)]

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#    if message.text == config['msg']['main_menu']:
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#        try:
#            for i in range(3):
#                await message.bot.delete_message(message.chat.id, message.message_id - i)
#        except:
#            pass

#        await main_menu(message, state)

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30 –∏–ª–∏ –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é
#    elif message.text.strip() in str_numbers:
        # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        # await state.update_data(term=message.text.strip())

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ excel_file_sended
#        await MyStates.excel_file_sended.set()

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ excel —Ñ–∞–π–ª–∞
#        excel_file = excel_creator(message.text.strip())

        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#        try:
#            for i in range(2):
#                await message.bot.delete_message(
#                    message.chat.id,
#                    message.message_id - i
#                )
#        except:
#            pass

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤–º–µ—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, —Ç–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ–º report_menu
#    elif message.text == config['msg']['back']:
        # –ù–∞ –≤—Å—è–∫–∏–µ —Å–ª—É—á–∞–∏ –∞–Ω–Ω—É–ª–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ term
        # await state.update_data(term=None)

        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#        try:
#            for i in range(2):
#                await message.bot.delete_message(
#                    message.chat.id,
#                    message.message_id - i
#                )
#        except:
#            pass

#        await report_menu(message, state)

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
#    else:
        # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
#        button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#        try:
#            for i in range(2):
#                await message.bot.delete_message(message.chat.id, message.message_id - i)
#        except:
#            pass

#        msg = config['msg']['wrong_term']
#        await message.answer(msg, reply_markup=button)




    dp.register_message_handler(
        excel_chosen_term_handler,
        content_types=['text'],
        state=MyStates.excel_waiting_for_term
    )









    def get_chosen_days(self):
        """
        –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
        """
        chosen_days = []
        # chosen_days_str –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –¥–∞—Ç—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ excel —Ñ–∞–π–ª –≤ –≤–∏–¥–µ str
        chosen_days_str = []

        for i in range(int(self.term)):
            day = datetime.datetime.now().date() - datetime.timedelta(days=i)
            chosen_days.append(day)
            chosen_days_str.append(day.strftime('%d.%m.%Y'))

        chosen_days.reverse()
        chosen_days_str.reverse()

        return chosen_days, chosen_days_str
