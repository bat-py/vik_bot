async def all_workers_late_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –µ—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"  ->  "–û–ø–æ–∑–¥–∞–Ω–∏–µ"
    :param callback_query:
    :param state:
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.all_workers_waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (1-30):
    chosen_term = all_data['term']

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö(who=control): [(ID, name, Who, chat_id), ...]
    all_workers = sql_handler.get_all_workers()

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    # –ö–∞–∂–¥—ã–π —Ü—ã–∫–ª —Å–æ—Å—Ç–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
    # "--- 28.03.2022 ---\n –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä (–ü—Ä–∏—Ö–æ–¥ 9:10)\n –®–µ—Ä–∏–±–∞–µ–≤ –ê–∑–∏–∑–±–µ–∫ (–ü—Ä–∏—Ö–æ–¥ 10:40)\n ..."
    for day in chosen_days:
        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—á–∏—Ö –∫—Ç–æ –æ–ø–æ–∑–¥–∞–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ: {time: "–ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä (–ü—Ä–∏—Ö–æ–¥ 9:10)", ...}
        latecomer_users_in_day = {}
        # –ö–∞–∂–¥—ã–π —Ü—ã–∫–ª —Å–æ—Å—Ç–∞–≤–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ø—Ä–æ –æ–¥–Ω–æ–≥–æ –æ–ø–æ–∑–¥–∞–≤—à–µ–≥–æ —á–µ–ª–µ–≤–µ–∫–∞: "–ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä (–ü—Ä–∏—Ö–æ–¥ 9:10)"
        for worker in all_workers:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞—É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã: in_time –∏–ª–∏ False –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–µ–ª
            in_time = sql_handler.get_user_in_history(worker[0], day)

            # –ï—Å–ª–∏ in_out_time –Ω–µ —Ä–∞–≤–Ω–æ False
            if in_time:
                # –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–ø–æ–∑–¥–∞–ª –ª–∏ –æ–Ω –∏–ª–∏ –Ω–µ—Ç
                start_hour = int(config['time']['start_hour'])
                start_minute = int(config['time']['start_hour']) + 10
                start_time = datetime.timedelta(hours=start_hour, minutes=start_minute)

                came_time = datetime.timedelta(
                    hours=in_time[0].hour,
                    minutes=in_time[0].minute,
                    seconds=in_time[0].second
                )

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –±–æ–ª—å—à–µ —á–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã(+10–º–∏–Ω), –∑–Ω–∞—á–∏—Ç –æ–Ω –æ–ø–æ–∑–¥–∞–ª
                if came_time > start_time:
                    came_time_str = in_time[0].strftime('%H:%M')
                    # –í latecomer_users_in_day –¥–æ–±–∞–≤–∏–º: "–ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä (–ü—Ä–∏—Ö–æ–¥ 9:10)"
                    mesg1 = f"{worker[1]} ({config['msg']['came_no_bold']} {came_time_str})"
                    latecomer_users_in_day[in_time[0]] = mesg1

        msg2_1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                 config['msg']['three_lines'] + '</b>\n'

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ(date) –≤—ã—Ö–æ–¥–Ω–æ–π, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ–º: "üóì –í—ã—Ö–æ–¥–Ω—ã–µ\n –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ | –í—Ä–µ–º—è —É—Ö–æ–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "üóì –í—ã—Ö–æ–¥–Ω—ã–µ\n –ù–µ –ø—Ä–∏—à–µ–ª"
        if str(datetime.date.isoweekday(day)) in config['time']['day_off']:
            msg2_2 = config['msg']['weekend'] + '\n'
        else:
            msg2_2 = ''

        # –ï—Å–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ –æ–ø–æ–∑–¥–∞–ª
        if latecomer_users_in_day:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
            # –•—Ä–∞–Ω–∏—Ç [(time, "–ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä (–ü—Ä–∏—Ö–æ–¥ 9:10)"), ...]
            latecomer_users_list = list(latecomer_users_in_day.items())
            latecomer_users_list.sort(key=lambda item: item[0])
            latecomer_users_list = list(map(lambda it: it[1], latecomer_users_list))

            msg2_3 = '\n'.join(latecomer_users_list)
        else:
            msg2_3 = config['msg']['no_latecomers']

        msg2_block_list.append(msg2_1 + msg2_2 + msg2_3)

    msg1 = f"<b>{config['msg']['late_report_type']}</b>"
    msg2 = '\n\n'.join(msg2_block_list)
    msg = msg1 + '\n\n' + msg2

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )
