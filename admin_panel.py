import asyncio
import collections
import configparser
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import button_creators
import sql_handler
from aiogram import types, Dispatcher
import datetime
import excel_handler
from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="vik_bot")

config = configparser.ConfigParser()
config.read('config.ini')


class MyStates(StatesGroup):
    waiting_for_password = State()
    waiting_for_worker_number = State()
    waiting_for_term = State()
    waiting_for_report_type = State()
    waiting_report_page_buttons = State()
    # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è" –≤ –º–µ–Ω—é "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –µ–º—É –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞
    # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –≤–∏–¥–µ inline –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–µ—Ç –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤—ã–±–µ—Ä–µ—Ç –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
    waiting_for_location = State()

    all_workers_waiting_for_term = State()
    all_workers_waiting_for_report_type = State()
    all_workers_waiting_report_page_buttons = State()

    excel_file_sended = State()


def get_location_address(latitude, longitude):
    """
    –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–æ—Ä–∏–¥–∞–Ω—Ç—ã
    :param latitude:
    :param longitude:
    :return: ["–ê–¥—Ä–µ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç(..., –£–ª–∏—Ü–∞, –ì–æ—Ä–æ–¥)", "–°—Å—ã–ª–∫—É –Ω–∞ google maps"] –∏–ª–∏ False –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å geopy
    """
    try:
        # –° –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è geopy –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å
        location_text = geolocator.reverse(f"{latitude}, {longitude}")
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏–Ω–¥–µ–∫—Å –ø–æ—á—Ç–∏ –∏ —Å—Ç—Ä–∞–Ω—É(–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)
        location_list = location_text.address.split(', ')
        location_text = ', '.join(location_list[:-2])
        location_url = f"https://www.google.com/maps?q={latitude},{longitude}&ll={latitude},{longitude}&z=16"

        return location_text, location_url
    except:
        return False


async def send_main_menu_to_all_admins(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º [(chat_id, first_name, notification), ...]
    admins = sql_handler.get_admins_list()

    for admin in admins:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons_name = [
            [config['msg']['present'], config['msg']['missing']],
            [config['msg']['report'], config['msg']['on_off']]
        ]

        buttons = button_creators.reply_keyboard_creator(buttons_name)

        # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = config['msg']['main_menu']

        await message.bot.send_message(
            admin[0],
            msg,
            reply_markup=buttons
        )


async def admin_command_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin
    :param state:
    :param message:
    :return:
    """
    chat_id = message.chat.id
    # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≥–¥–∞ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç chat_id —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
    check_admin_exist = sql_handler.check_admin_exist(chat_id)

    # –ï—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ "admins" –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if check_admin_exist:
        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω first_name"
        msg1 = config['msg']['welcome_admin']
        msg2 = message.chat.first_name
        msg = f"{msg1} <b>{msg2}</b>"
        await message.answer(msg)

        await main_menu(message, state)

    # –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤, —Ç–æ–≥–¥–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
    else:
        # password = sql_handler.get_admin_menu_password()

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting_for_password
        await MyStates.waiting_for_password.set()

        msg = config['msg']['enter_password']

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å
        cancel = config['msg']['cancel']
        button = button_creators.reply_keyboard_creator([[cancel]])

        await message.bot.send_message(
            chat_id,
            msg,
            reply_markup=button
        )


async def check_password(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    :param state:
    :param message:
    :return:
    """

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å, —Ç–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–º state –∏ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–º—Å —á—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ
    if message.text == config['msg']['cancel']:
        await state.finish()

        msg = config['msg']['canceled']
        # –ù—É–∂–µ–Ω —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å reply markup –∫–Ω–æ–ø–∫–∏
        hide_reply_markup = button_creators.hide_reply_buttons()
        await message.bot.send_message(
            message.chat.id,
            msg,
            reply_markup=hide_reply_markup
        )
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å
    else:
        password = sql_handler.get_admin_menu_password()

        # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–∏–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–Ω –Ω–∞—á–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if message.text.strip() == password:
            chat_id = message.chat.id
            first_name = message.chat.first_name
            # –î–æ–±–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É "admins"
            sql_handler.add_new_admin(chat_id, first_name)

            # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω first_name"
            msg1 = config['msg']['welcome_admin']
            msg2 = message.chat.first_name
            msg = f"{msg1} <b>{msg2}</b>"
            await message.bot.send_message(
                message.chat.id,
                msg
            )

            # –û—Ç–ø—Ä–∞–≤–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await main_menu(message, state)

        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–≥–¥–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏
        else:
            msg = config['msg']['wrong_password']
            await message.bot.send_message(
                message.chat.id,
                msg
            )


async def main_menu(message_or_callback_query, state: FSMContext):
    await state.finish()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons_name = [
        [config['msg']['present'], config['msg']['missing']],
        [config['msg']['report'], config['msg']['on_off']]
    ]

    buttons = button_creators.reply_keyboard_creator(buttons_name)

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = config['msg']['main_menu']

    await message_or_callback_query.bot.send_message(
        message_or_callback_query.from_user.id,
        msg,
        reply_markup=buttons
    )


async def report_menu(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç—á–µ—Ç"  –∏–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é
    :param message:
    :param state:
    :return: –í–µ—Ä–Ω–µ—Ç inline –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤: üìã–û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, üóÇ–û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, üìä–û—Ç—á–µ—Ç –≤ excel
    """
    # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é, –ø–æ—ç—Ç–æ–º—É –≤—ã–∫–ª—é—á–∏–º state
    await state.finish()

    # –ï—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª —Å –≥–ª–∞–≤. –º–µ–Ω—é —Ç–æ–≥–¥–∞ —É–¥–∞–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—è —Ç–æ–≥–¥–∞ —É–¥–∞–ª–∏–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text == config['msg']['report']:
        n = 1
    else:
        n = 2
    try:
        for i in range(n):
            await message.bot.delete_message(message.chat.id, message.message_id - i)
    except:
        pass

    # —Å–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏:
    buttons = button_creators.inline_keyboard_creator([
        [[config['msg']['one_worker_report'], 'one_worker_report']],
        [[config['msg']['all_workers_report'], 'all_workers_report']],
        [[config['msg']['excel_report'], 'excel_report']],
        [[config['msg']['main_menu'], 'main_menu']]
    ]
    )

    msg = config['msg']['report_type']

    await message.answer(
        msg,
        reply_markup=buttons
    )


def on_off_menu_handler_buttons_creator(admin_status):
    """
    –§—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ–º –ª–∏—Å—Ç: [0, 1, 1, 0]. –ò—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–æ–≥–æ –æ–Ω —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–º –∫–Ω–æ–ø–∫–∏
    :param admin_status:
    :return: –í–µ—Ä–Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é "–í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    """
    on = config['msg']['on']
    off = config['msg']['off']

    statues = []
    for i in admin_status:
        # –ï—Å–ª–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö" –≤–∫–ª—é—á–µ–Ω
        if i:
            statues.append(on)
        else:
            statues.append(off)

    but1_msg = f"{config['msg']['late_come_notification']} (–°—Ç–∞—Ç—É—Å: {statues[0]})"
    but2_msg = f"{config['msg']['latecomer_came_notification']} (–°—Ç–∞—Ç—É—Å: {statues[1]})"
    but3_msg = f"{config['msg']['comment_notification']} (–°—Ç–∞—Ç—É—Å: {statues[2]})"
    but4_msg = f"{config['msg']['early_leave_notification']} (–°—Ç–∞—Ç—É—Å: {statues[3]})"
    but5_msg = config['msg']['main_menu']

    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
    buttons = button_creators.inline_keyboard_creator([
        [[but1_msg, 'notification_button1']],
        [[but2_msg, 'notification_button2']],
        [[but3_msg, 'notification_button3']],
        [[but4_msg, 'notification_button4']],
        [[but5_msg, 'main_menu']]
    ]
    )

    return buttons


async def on_off_menu_handler(message: types.Message):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ "–í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    :param message:
    :return:
    """
    check_admin = sql_handler.check_admin_exist(message.chat.id)

    # –ï—Å–ª–∏ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ
    if check_admin:
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(2):
                await message.bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass

        # –í –º–µ–Ω—é "–í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" –±—É–¥–µ—Ç 3 inline –∫–Ω–æ–ø–∫–∏
        msg = config['msg']['on_off_menu']

        # –ë–µ—Ä–µ–º 3 —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã admin –∏ –≤—ã—Ö–æ–¥—è –∏–∑ –Ω–µ–≥–æ —Å–æ–∑–¥–∞–¥–∏–º inline –∫–Ω–æ–ø–∫–∏. –ü–æ–ª—É—á–∏—Ç –ª–∏—Å—Ç —Ç–∏–ø–∞: (1, 0, 1, 0):
        # (late_come_notification, latecomer_came_notification, comment_notification, early_leave_notification)
        admin_status = sql_handler.get_admin_notification_status(message.chat.id)

        # –§—É–Ω–∫—Ü–∏—è on_off_menu_handler_buttons_creator —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–º –∫–Ω–æ–ø–∫–∏
        buttons = on_off_menu_handler_buttons_creator(admin_status)

        await message.bot.send_message(
            message.chat.id,
            msg,
            reply_markup=buttons
        )


async def on_off_buttons_handler(callback_query: types.CallbackQuery):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–Ω–æ–ø–∫–∏(–£–≤–µ–¥–æ–º. –æ–± –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö, –£–≤–µ–¥–æ–º. –æ –ø—Ä–∏—Ö–æ–¥–µ –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö, –£–≤–µ–¥–æ–º. –æ —Ä–∞–Ω–æ —É—à–µ–¥—à–∏—Ö) –º–µ–Ω—é
    "–í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    :param callback_query:
    :return:
    """
    chosen_button = callback_query.data.replace('notification_button', '')

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ 4 —Å—Ç–∞—Ç—É—Å–∞: [0, 1, 1, 0]
    all_notification_status = list(sql_handler.get_admin_notification_status(callback_query.from_user.id))

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ 1-–∫–Ω–æ–ø–∫—É: –£–≤–µ–¥–æ–º. –æ–± –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö
    if chosen_button == '1':
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω —Ç–æ–≥–¥–∞ –µ–≥–æ –≤—ã–∫–ª—é—á–∏–º
        if all_notification_status[0] == 1:
            all_notification_status[0] = 0
        # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω —Ç–æ–≥–¥–∞ –µ–≥–æ –≤–∫–ª—é—á–∏–º
        else:
            all_notification_status[0] = 1

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ 2-–∫–Ω–æ–ø–∫—É: –£–≤–µ–¥–æ–º. –æ –ø—Ä–∏—Ö–æ–¥–µ –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö
    elif chosen_button == '2':
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω —Ç–æ–≥–¥–∞ –µ–≥–æ –≤—ã–∫–ª—é—á–∏–º
        if all_notification_status[1] == 1:
            all_notification_status[1] = 0
        # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω —Ç–æ–≥–¥–∞ –µ–≥–æ –≤–∫–ª—é—á–∏–º
        else:
            all_notification_status[1] = 1

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ 3-–∫–Ω–æ–ø–∫—É: –£–≤–µ–¥–æ–º. –æ–± –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏(–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)
    elif chosen_button == '3':
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω —Ç–æ–≥–¥–∞ –µ–≥–æ –≤—ã–∫–ª—é—á–∏–º
        if all_notification_status[2] == 1:
            all_notification_status[2] = 0
        # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω —Ç–æ–≥–¥–∞ –µ–≥–æ –≤–∫–ª—é—á–∏–º
        else:
            all_notification_status[2] = 1

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ 4-–∫–Ω–æ–ø–∫—É: –£–≤–µ–¥–æ–º. –æ —Ä–∞–Ω–æ —É—à–µ–¥—à–∏—Ö
    elif chosen_button == '4':
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω —Ç–æ–≥–¥–∞ –µ–≥–æ –≤—ã–∫–ª—é—á–∏–º
        if all_notification_status[3] == 1:
            all_notification_status[3] = 0
        # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω —Ç–æ–≥–¥–∞ –µ–≥–æ –≤–∫–ª—é—á–∏–º
        else:
            all_notification_status[3] = 1

    # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
    sql_handler.update_admin_notification_status(callback_query.from_user.id, all_notification_status)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ inline –∫–Ω–æ–ø–∫–∏
    new_inline_buttons = on_off_menu_handler_buttons_creator(all_notification_status)

    # –ò–∑–º–µ–Ω–∏–º inline –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –≤–∏–¥–µ–ª —á—Ç–æ
    await callback_query.message.edit_reply_markup(new_inline_buttons)


async def missing_list_handler(message: types.Message):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ "–°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö" –∏ –æ–Ω –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö –∫–æ–≥–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç—É
    :param message:
    :return:
    """
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Ö –∫—Ç–æ –ø—Ä–∏—à–µ–ª
    ids_who_came = sql_handler.get_todays_logins()
    ids_who_came = [int(i[0]) for i in ids_who_came]
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ —Ç–µ –≥–¥–µ Who == 'Control')
    all_members_id = sql_handler.get_all_users_id(control=True)
    all_members_id = [i[0] for i in all_members_id]

    # –°–ø–∏—Å–æ–∫ –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö
    latecommers = []
    for i in all_members_id:
        if i not in ids_who_came:
            latecommers.append(i)

    # –°–æ–∑–¥–∞–µ–º 1 —Å—Ç—Ä–æ–∫—É: --- 21.05.2022 ---
    lines = config['msg']['three_lines']
    msg1 = lines + ' ' + datetime.date.today().strftime('%d.%m.%Y') + ' ' + lines

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
    if latecommers:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö: [(ID, Name, chat_id), ...]
        latecommer_users = sql_handler.get_users_name_chat_id(latecommers)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –∏–º–µ–Ω–∏ –ª—é–¥–µ–π
        latecommer_users.sort(key=lambda item: item[1])

        latecommer_users_names_list = []
        for n, user in enumerate(latecommer_users):
            msg = f"{n + 1}. {user[1]}"
            latecommer_users_names_list.append(msg)

        msg2 = config['msg']['missing_full']
        msg3 = '\n'.join(latecommer_users_names_list)
        msg = msg1 + '\n' + msg2 + '\n' + msg3
    # –ï—Å–ª–∏ –≤—Å–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–µ—Ç
    else:
        msg = msg1 + '\n' + config['msg']['missing_full'] + '\n' + config['msg']['no_missing']

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "missing"
    try:
        await message.bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

    await message.bot.send_message(
        message.chat.id,
        msg
    )


async def present_list_handler(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ "–°–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö" –∏ –æ–Ω –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ
    :param state:
    :param message:
    :return:
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö –∫—Ç–æ –ø—Ä–∏—à–µ–ª —Å–µ–≥–æ–¥–Ω—è(–ø–æ—Å–ª–µ–¥–Ω—ã–π –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è): [(id, time, DeviceNo, name), ...]
    # get_present_workers_list —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Who(Control/Uncontrol) –∏ –≤–µ—Ä–Ω–µ—Ç —Ç–µ—Ö —É –∫–æ–≥–æ Control
    present_list = sql_handler.get_present_workers_list()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º present_list –ø–æ name
    #

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
    if present_list:
        # –¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö –∫—Ç–æ –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ñ–∏—Å–∞: [(id, time, DeviceNo, name), ...]
        msg3_green_block = []
        # –¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö –∫—Ç–æ –≤—ã—à–µ–ª –∏–∑ –æ—Ñ–∏—Å–∞: [(id, time, DeviceNo, name), ...]
        msg3_yellow_block = []

        in_device = config['device']['in_device']
        # –ö–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä —Ö—Ä–∞–Ω–∏—Ç: (id, time, DeviceNo, name)
        for worker in present_list:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—ã–π –∑–∞–ø–∏—Å—å –±—ã–ª —á–µ—Ä–µ–∑ in_device, –∑–Ω–∞—á–∏—Ç –æ–Ω –≤—Å—ë –µ—â–µ –≤ –æ—Ñ–∏—Å–µ
            if worker[2] == in_device:
                msg3_green_block.append(f"{config['msg']['green']} {worker[3]}")
            else:
                time = worker[1].strftime('%H:%M')
                msg3_yellow_block.append(f"{config['msg']['yellow']} <b>{time}</b> {worker[3]}")

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º msg3_green_block –∏ msg3_yellow_block
        msg3_green_block.sort()
        msg3_yellow_block.sort()

        msg3 = '\n'.join(msg3_green_block) + '\n' + '\n'.join(msg3_yellow_block)

    # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ –ø—Ä–∏—à–ª–∏ –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–µ—Ç
    else:
        msg3 = config['msg']['no_present']

    # –°–æ–∑–¥–∞–µ–º 1 —Å—Ç—Ä–æ–∫—É: --- 21.05.2022 ---
    lines = config['msg']['three_lines']
    msg1 = lines + ' ' + datetime.date.today().strftime('%d.%m.%Y') + ' ' + lines
    # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É: "–°–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ª—é–¥–µ–π:"
    msg2 = config['msg']['present_full']

    msg = msg1 + '\n' + msg2 + '\n' + msg3

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "missing"
    try:
        await message.bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

    await message.bot.send_message(
        message.chat.id,
        msg
    )


async def one_worker_report_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª "üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞". –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö —á—Ç–æ–±—ã –æ–Ω
    –≤—ã–±—Ä–∞–ª –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    :param state:
    :param message:
    :return:
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö(who=control): [(ID, name, Who, chat_id), ...]
    users_list = sql_handler.get_all_workers()

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ( —Å 3 inline –∫–Ω–æ–ø–∫–∞–º–∏)
    try:
        await callback_query.bot.delete_message(
            callback_query.from_user.id,
            callback_query.message.message_id
        )
    except:
        pass

    # –°–æ—Å—Ç–∞–≤–∏–º –∏–∑ users_list –±–∏–±–ª–∏–æ—Ç–µ–∫—É {1: [ID, name, Who, chat_id], 2:...}
    users_dict = {}
    for i in range(len(users_list)):
        users_dict[str(i + 1)] = users_list[i]
    # –°–æ—Ö—Ä–∞–Ω–∏–º users_dict –≤ state, –æ–Ω –ø–æ—Ç–æ–º –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    await state.update_data(users_dict=users_dict)

    msg1 = config['msg']['choose_worker']
    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ —Å–º—Å –∞–¥–º–∏–Ω—É: ['1) Alisher Raximov', '', ...]
    nomer_name_list = [f'{nomer}. {data[1]}' for nomer, data in users_dict.items()]
    msg2 = '\n'.join(nomer_name_list)
    msg = msg1 + '\n' + msg2

    # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back']]])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    await MyStates.waiting_for_worker_number.set()

    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )


async def choosen_worker_handler(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –Ω–æ–º–µ—Ä —Ä–∞–±–æ—á–µ–≥–æ. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param message:
    :param state:
    :return:
    """
    data = await state.get_data()
    # –ü–æ–ª—É—á–∏–º "users_list" –±–∏–±–ª–∏–æ—Ç–µ–∫—É {'1': [ID, name, Who, chat_id], 2:...}
    users_dict = data['users_dict']
    workers_numbers_list = users_dict.keys()

    if message.text == config['msg']['main_menu']:
        try:
            for i in range(3):
                await message.bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass

        await main_menu(message, state)

    # –ï—Å–ª–∏ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –µ—Å—Ç—å, –∑–Ω–∞—á–∏—Ç –∞–¥–º–∏–Ω –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥ —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é
    elif data.get('chosen_worker') and message.text == config['msg']['back']:
        try:
            for i in range(2):
                await message.bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass

        chosen_worker = data['chosen_worker']
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting_for_term
        await MyStates.waiting_for_term.set()

        # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

        # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è: "–í—ã –≤—ã–±—Ä–∞–ª–∏: Name"
        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = config['msg']['term']
        msg = msg1 + '\n\n' + msg2

        await message.answer(
            msg,
            reply_markup=button
        )

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤ —ç—Ç–æ–º –º–µ–Ω—é –∏  –≤—ã–±—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä, —Å–ø—Ä–æ—Å–∏–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç—á–µ—Ç–∞ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å
    elif message.text in workers_numbers_list:
        try:
            for i in range(2):
                await message.bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass

        chosen_worker_info = users_dict[message.text]
        # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç—å (ID, name, Who, chat_id)
        await state.update_data(chosen_worker=chosen_worker_info)

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting_for_term
        await MyStates.waiting_for_term.set()

        # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

        # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è: "–í—ã –≤—ã–±—Ä–∞–ª–∏: Name"
        msg1 = config['msg']['you_chose'] + chosen_worker_info[1]
        msg2 = config['msg']['term']
        msg = msg1 + '\n\n' + msg2

        await message.answer(
            msg,
            reply_markup=button
        )

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä
    else:
        # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        # button = button_creators.reply_keyboard_creator([[[config['msg']['back'], config['msg']['main_menu']]])
        try:
            await message.bot.delete_message(message.chat.id, message.message_id)
        except:
            pass

        msg = config['msg']['wrong_number']
        await message.answer(msg)  # , reply_markup=button)


async def chosen_term_handler(message_or_callback_query, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç—á–µ—Ç–∞ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å(1-31). –ü–æ—Ç–æ–º –≤–µ—Ä–Ω–µ—Ç 6 –ø—É–Ω–∫—Ç–æ–≤
    –ò–ª–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é (–∏–∑ –∫–∞–∫–æ–≥–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –æ—Ç—á–µ—Ç–∞)
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param message_or_callback_query:
    :param state:
    :return:
    """
    all_data = await state.get_data()

    str_numbers = [str(i) for i in range(1, 31)]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª —Å—é–¥–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞(–æ—Ç–≤–µ—Ç–∏–ª –Ω–∞: "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (1-30 –¥–Ω–µ–π):")
    try:
        text = message_or_callback_query.text
    # –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—É—á–∏–ª callback_data –∑–Ω–∞—á–∏—Ç –æ–Ω –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Å–ª–µ–¥—É—é—à–µ–≥–æ –º–µ–Ω—é(6 –ø—É–Ω–∫—Ç–æ–≤)
    except:
        text = None

    if text:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if message_or_callback_query.text == config['msg']['main_menu']:
            # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                for i in range(3):
                    await message_or_callback_query.bot.delete_message(message_or_callback_query.chat.id,
                                                                       message_or_callback_query.message_id - i)
            except:
                pass

            await main_menu(message_or_callback_query, state)

        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30 –∏–ª–∏ –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é (–∏–∑ –∫–∞–∫–æ–≥–æ-—Ç–æ –ø—É–Ω–∫—Ç–∞ –æ—Ç—á–µ—Ç–∞)
        elif message_or_callback_query.text.strip() in str_numbers or \
                (message_or_callback_query.text == config['msg']['back'] and all_data.get('term')):
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π term –∑–Ω–∞—á–∏—Ç –æ–Ω –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é.
            if not all_data.get('term'):
                # –¢–∞–∫ –∫–∞–∫ term –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–∏—Ç –æ–Ω —Ç—É—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –ø–æ—ç—Ç–æ–º—É —Å–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                await state.update_data(term=message_or_callback_query.text.strip())

            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting_for_report_type
            await MyStates.waiting_for_report_type.set()

            # –°–æ–∑–¥–∞–µ–º 6 inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            buttons_list = [
                [[config['msg']['come_leave_report_type'], 'come_leave_report_type']],
                [[config['msg']['late_report_type'], 'late_report_type']],
                [[config['msg']['early_leaved_report_type'], 'early_leaved_report_type']],
                [[config['msg']['missed_days_report_type'], 'missed_days_report_type']],
                [[config['msg']['presence_time_report_type'], 'presence_time_report_type']],
                [[config['msg']['geolocation_report_type'], 'geolocation_report_type']],
                [[config['msg']['all_data_report_type'], 'all_data_report_type']],
                [[config['msg']['back'], 'back'], [config['msg']['main_menu'], 'main_menu']]
            ]
            inline_button = button_creators.inline_keyboard_creator(buttons_list, row_width=2)

            msg = config['msg']['choose_report_type']

            # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                for i in range(2):
                    await message_or_callback_query.bot.delete_message(
                        message_or_callback_query.chat.id,
                        message_or_callback_query.message_id - i
                    )
            except:
                pass

            # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 6 inline –∫–Ω–æ–ø–∫–∞–º–∏
            await message_or_callback_query.answer(msg, reply_markup=inline_button)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤–º–µ—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        elif message_or_callback_query.text == config['msg']['back']:
            # –ù–∞ –≤—Å—è–∫–∏–µ —Å–ª—É—á–∞–∏ –∞–Ω–Ω—É–ª–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ term
            await state.update_data(term=None)

            # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                for i in range(2):
                    await message_or_callback_query.bot.delete_message(
                        message_or_callback_query.chat.id,
                        message_or_callback_query.message_id - i
                    )
            except:
                pass

            await MyStates.waiting_for_worker_number.set()
            await one_worker_report_handler(message_or_callback_query, state=state)

        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
        else:
            # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
            # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                for i in range(2):
                    await message_or_callback_query.bot.delete_message(message_or_callback_query.chat.id,
                                                                       message_or_callback_query.message_id - i)
            except:
                pass

            msg = config['msg']['wrong_term']
            await message_or_callback_query.answer(msg, reply_markup=button)
    # –ï—Å–ª–∏ –æ–Ω –≤–µ—Ä–Ω—É–ª—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é(6 –ø—É–Ω–∫—Ç–æ–≤) –∏—Å–ø–æ–ª—å–∑—É—è inline –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    else:
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(2):
                await message_or_callback_query.bot.delete_message(
                    message_or_callback_query.message.chat.id,
                    message_or_callback_query.message.message_id - i
                )
        except:
            pass

        # –ê–Ω–Ω—É–ª–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ term
        await state.update_data(term=None)

        data = await state.get_data()
        chosen_worker = data['chosen_worker']
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting_for_term
        await MyStates.waiting_for_term.set()

        # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

        # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è: "–í—ã –≤—ã–±—Ä–∞–ª–∏: Name"
        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = config['msg']['term']
        msg = msg1 + '\n\n' + msg2

        await message_or_callback_query.bot.send_message(
            message_or_callback_query.from_user.id,
            msg,
            reply_markup=button
        )


async def come_leave_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª 1 –ø—É–Ω–∫—Ç: –ü—Ä–∏—Ö–æ–¥ / –£—Ö–æ–¥. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param state:
    :param callback_query:
    :return:
    """

    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: (ID, name, Who, chat_id)
    chosen_worker = all_data['chosen_worker']
    chosen_term = all_data['term']

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    for day in chosen_days:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã:  (in_time, out_time) –∏–ª–∏ (in_time, False) –∏–ª–∏ False
        in_out_time = sql_handler.get_user_in_out_history(chosen_worker[0], day)

        mesg1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                config['msg']['three_lines'] + '</b>\n'

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ(date) –≤—ã—Ö–æ–¥–Ω–æ–π, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ–º: "üóì –í—ã—Ö–æ–¥–Ω—ã–µ\n –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ | –í—Ä–µ–º—è —É—Ö–æ–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "üóì –í—ã—Ö–æ–¥–Ω—ã–µ\n –ù–µ –ø—Ä–∏—à–µ–ª"
        if str(datetime.date.isoweekday(day)) in config['time']['day_off']:
            mesg2 = config['msg']['weekend'] + '\n'
        else:
            mesg2 = ''

        # –ï—Å–ª–∏ –≤ in_out_time: False
        if not in_out_time:
            mesg3 = config['msg']['dont_came']
        # –ï—Å–ª–∏ –≤ in_out_time: (in_time, out_time)
        elif in_out_time[0] and in_out_time[1]:
            mesg3_1 = config['msg']['came'] + ' ' + in_out_time[0].strftime('%H:%M')
            mesg3_2 = config['msg']['leaved'] + ' ' + in_out_time[1].strftime('%H:%M')
            mesg3 = mesg3_1 + '  <b>|</b>  ' + mesg3_2
        # –ï—Å–ª–∏ –≤ in_out_time: (in_time, False)
        else:
            mesg3_1 = config['msg']['came'] + ' ' + in_out_time[0].strftime('%H:%M')
            mesg3_2 = config['msg']['leaved']
            mesg3 = mesg3_1 + '  <b>|</b>  ' + mesg3_2

        # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg2 = mesg1 + mesg2 + mesg3

        # –î–æ–±–∞–≤–∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ msg2_block_list
        msg2_block_list.append(msg2)

    msg1 = config['msg']['you_chose'] + chosen_worker[1]
    msg2 = '\n\n'.join(msg2_block_list)
    msg = msg1 + '\n\n' + msg2

    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )


async def late_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª 2 –ø—É–Ω–∫—Ç: –û–ø–æ–∑–¥–∞–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param callback_query:
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: (ID, name, Who, chat_id)
    chosen_worker = all_data['chosen_worker']
    chosen_term = all_data['term']

    # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏–π
    total_late_hours = datetime.timedelta()

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "report" –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –ø–æ id —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫:  [(id, user_id, date, comment, time, location), ...], –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–Ω—å
    worker_report_list = sql_handler.get_data_by_term(chosen_worker[0], chosen_term)
    # –ò–∑ worker_report_list —Å–æ–∑–¥–∞–¥–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {date: (id, user_id, date, comment, time), ...}
    worker_report_dict = {}
    for day in worker_report_list:
        worker_report_dict[day[2]] = day

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    for day in chosen_days:
        if day in worker_report_dict:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã:  (in_time, out_time) –∏–ª–∏ (in_time, False) –∏–ª–∏ False
            in_out_time = sql_handler.get_user_in_out_history(chosen_worker[0], day)

            # –ï—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º, —Å–æ—Å—Ç–∞–≤–∏–º –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ. worker_report_dict[day] —Ö—Ä–∞–Ω–∏—Ç (id, user_id, date, comment, time, location)
            if worker_report_dict[day][4]:
                mesg1 = config['msg']['came'] + ' ' + str(worker_report_dict[day][4].strftime("%H:%M"))

                # –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç –æ–Ω –æ–ø–æ–∑–¥–∞–ª
                beginning_delta = datetime.timedelta(hours=int(config['time']['start_hour']),
                                                     minutes=int(config['time']['start_minute']))
                came_time = worker_report_dict[day][4]
                came_time_delta = datetime.timedelta(hours=came_time.hour, minutes=came_time.minute,
                                                     seconds=came_time.second)
                late_time_in_seconds = came_time_delta - beginning_delta
                late_time = (datetime.datetime.min + late_time_in_seconds).time()

                # –í–º–µ—Å—Ç–æ "–û–ø–æ–∑–¥–∞–ª –Ω–∞: 07:52" —Å–æ–∑–¥–∞–µ–º "–û–ø–æ–∑–¥–∞–ª –Ω–∞: 7 —á–∞—Å–æ–≤ 52 –º–∏–Ω—É—Ç—ã"
                hour = str(late_time.hour)
                minute = str(late_time.minute)
                if hour == '0':
                    time = f"{minute} –º–∏–Ω."
                else:
                    time = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
                mesg3 = config['msg']['late_by'] + ' ' + time

                # –ü—Ä–∏–±–∞–≤–∏–º –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è –≤ —Å—É–º–º–∞—Ä–Ω—É—é delta
                total_late_hours += late_time_in_seconds

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Å–≤–æ–µ–º –æ–ø–æ–∑–¥–∞–Ω–∏–∏
                if worker_report_dict[day][3]:
                    mesg4 = config['msg']['reason'] + ' ' + worker_report_dict[day][3]
                else:
                    mesg4 = config['msg']['reason']

                # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ö–æ—Ç—è –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—é –∑–Ω–∞—á–∏—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Ç–æ–∂–µ –æ—Å—Ç–∞–≤–∏–ª
                if worker_report_dict[day][5]:
                    # –•—Ä–∞–Ω–∏—Ç [latitude, longitude]
                    location = worker_report_dict[day][5].split(',')

                    # –ü–æ–ª—É—á–∏–º ["–ê–¥—Ä–µ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç(..., –£–ª–∏—Ü–∞, –ì–æ—Ä–æ–¥)", "–°—Å—ã–ª–∫—É –Ω–∞ google maps"] –∏–ª–∏ False –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å geopy
                    location_text_url = get_location_address(*location)
                    msg5 = f"\n{config['msg']['address']} <a href='{location_text_url[1]}'>{location_text_url[0]}</a>"
                else:
                    msg5 = ''

                # –ï—Å–ª–∏ –≤ in_out_time —Ö—Ä–∞–Ω–∏—Ç—Å—è: False
                if not in_out_time:
                    mesg2 = config['msg']['leaved']
                # –ï—Å–ª–∏ –≤ in_out_time —Ö—Ä–∞–Ω–∏—Ç—Å—è: (in_time, out_time)
                elif in_out_time[1]:
                    # –ü–æ–ª—É—á–∏—Ç (msg, timedelta): "–£—à–µ–ª –≤: 19:20" –∏–ª–∏ "–£—à–µ–ª –≤: 15:20\n –£—à–µ–ª —Ä–∞–Ω—å—à–µ —á–µ–º: 3:40" –∏–ª–∏ "–£—à–µ–ª –≤: –ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö"
                    # timedelta: —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                    out_check = early_leave_check(in_out_time[1])
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ –∏ —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞
                    mesg2_5 = out_check[0]
                    if '#' in mesg2_5:
                        ms = mesg2_5.split('#')
                        mesg2 = ms[0]
                    else:
                        mesg2 = mesg2_5
                # –ï—Å–ª–∏ –≤ in_out_time —Ö—Ä–∞–Ω–∏—Ç—Å—è: (in_time, False)
                else:
                    mesg2 = config['msg']['leaved']

                msg2_1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                         config['msg']['three_lines'] + '</b>'
                # –•—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ "–ü—Ä–∏—Ö–æ–¥: | –£—Ö–æ–¥:\n –û–ø–æ–∑–¥–∞–ª –Ω–∞:\n –ü—Ä–∏—á–∏–Ω–∞:"
                msg2_2 = mesg1 + '  <b>|</b>  ' + mesg2 + '\n' + mesg3 + '\n' + mesg4 + msg5
                msg2 = msg2_1 + '\n' + msg2_2

                msg2_block_list.append(msg2)

    # –ï—Å–ª–∏ —Ö–æ—Ç—å —Ä–∞–∑ –æ–ø–æ–∑–¥–∞–ª
    if msg2_block_list:
        # –ò–∑ –¥–µ–ª—å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏–π
        total_late_time = datetime.datetime.min + total_late_hours
        if total_late_time.day == 1:
            hour = str(total_late_time.hour)
            minute = str(total_late_time.minute)
            if hour == '0':
                total_late = f"{minute} –º–∏–Ω."
            else:
                total_late = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
        else:
            day = int(total_late_time.strftime('%d')) - 1
            hour = str(total_late_time.hour)
            minute = str(total_late_time.minute)
            if hour == '0':
                total_late = f"{str(day)} –¥–Ω–µ–π {minute} –º–∏–Ω."
            else:
                total_late = f"{str(day)} –¥–Ω–µ–π {hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."

            total_late = total_late.lstrip('0')

        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = '\n\n'.join(msg2_block_list)
        msg3 = config['msg']['total_late'] + ' ' + total_late
        msg = msg1 + '\n\n' + msg2 + '\n' + config['msg']['lines'] + '\n' + msg3
    else:
        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = config['msg']['no_latecomes']
        msg = msg1 + '\n\n' + msg2

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button,
        disable_web_page_preview=True
    )


async def early_leaved_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª 3 –ø—É–Ω–∫—Ç: –†–∞–Ω–Ω–∏–π —É—Ö–æ–¥. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param callback_query:
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: (ID, name, Who, chat_id)
    chosen_worker = all_data['chosen_worker']
    chosen_term = all_data['term']

    # –•—Ä–∞–Ω–∏—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è(—Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)
    total_early_lived_time = datetime.timedelta()

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    for day in chosen_days:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ(date) –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π
        if str(datetime.date.isoweekday(day)) not in config['time']['day_off']:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã:  (in_time, out_time) –∏–ª–∏ (in_time, False) –∏–ª–∏ False
            in_out_time = sql_handler.get_user_in_out_history(chosen_worker[0], day)

            # –ï—Å–ª–∏ –≤ in_out_time —Ö—Ä–∞–Ω–∏—Ç—Å—è: (in_time, out_time)
            if in_out_time and in_out_time[1]:
                # –ü–æ–ª—É—á–∏—Ç (msg, timedelta): "–£—à–µ–ª –≤: 19:20" –∏–ª–∏ "–£—à–µ–ª –≤: 15:20" –∏–ª–∏ "–£—Ö–æ–¥: 17:00:00 # –£—à–µ–ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏: 0:15" –∏–ª–∏ "–£—à–µ–ª –≤: –ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö"
                # timedelta: —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                out_check = early_leave_check(in_out_time[1])

                # –ï—Å–ª–∏ –≤ out_check[0] –µ—Å—Ç—å # –∑–Ω–∞—á–∏—Ç –æ–Ω —É—à–µ–ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
                mesg2_1 = out_check[0]
                if '#' in mesg2_1:
                    ms = mesg2_1.split('#')
                    mesg3 = ms[0]
                    mesg4 = ms[1]

                    # –ü—Ä–∏–±–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞(–µ—Å–ª–∏ –æ–Ω —É—à–µ–ª —Ä–∞–Ω—å—à–µ. –ê –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ timedelta = 0)
                    total_early_lived_time += out_check[1]

                    # –•—Ä–∞–Ω–∏—Ç: "--- 29.03.2022 ---"
                    mesg1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                            config['msg']['three_lines'] + '</b>'
                    # –•—Ä–∞–Ω–∏—Ç "–ü—Ä–∏—Ö–æ–¥: 15:12"
                    mesg2 = config['msg']['came'] + ' ' + str(in_out_time[0].strftime("%H:%M"))
                    msg2_2 = mesg1 + '\n' + mesg2 + '  <b>|</b>  ' + mesg3 + '\n' + mesg4

                    msg2_block_list.append(msg2_2)

    # –ï—Å–ª–∏ —Ö–æ—Ç—å —Ä–∞–∑ —É—à–µ–ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    if msg2_block_list:
        # –ò–∑ –¥–µ–ª—å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º—è —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞
        total_early_time = datetime.datetime.min + total_early_lived_time
        if total_early_time.day == 1:
            hour = str(total_early_time.hour)
            minute = str(total_early_time.minute)
            if hour == '0':
                total_early = f"{minute} –º–∏–Ω."
            else:
                total_early = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
        else:
            day = int(total_early_time.strftime('%d')) - 1
            hour = str(total_early_time.hour)
            minute = str(total_early_time.minute)
            if hour == '0':
                total_early = f"{str(day)} –¥–Ω–µ–π {minute} –º–∏–Ω."
            else:
                total_early = f"{str(day)} –¥–Ω–µ–π {hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."

            total_early = total_early.lstrip('0')

        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = '\n\n'.join(msg2_block_list)
        msg3 = config['msg']['total_early'] + ' ' + total_early
        msg = msg1 + '\n\n' + msg2 + '\n' + config['msg']['lines'] + '\n' + msg3
    else:
        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = config['msg']['no_early_leaves']
        msg = msg1 + '\n\n' + msg2

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )


async def missed_days_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª 4 –ø—É–Ω–∫—Ç: –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param callback_query:
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: (ID, name, Who, chat_id)
    chosen_worker = all_data['chosen_worker']
    chosen_term = all_data['term']

    # –°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏—à–µ–ª
    missed_days = 0

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "report" –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –ø–æ id —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫:
    # [(id, user_id, date, comment, time, location), ...], –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–Ω—å
    worker_report_list = sql_handler.get_data_by_term(chosen_worker[0], chosen_term)
    # –ò–∑ worker_report_list —Å–æ–∑–¥–∞–¥–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {date: (id, user_id, date, comment, time, location), ...}
    worker_report_dict = {}
    for day in worker_report_list:
        worker_report_dict[day[2]] = day

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    for day in chosen_days:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã:  (in_time, out_time) –∏–ª–∏ (in_time, False) –∏–ª–∏ False
        in_out_time = sql_handler.get_user_in_out_history(chosen_worker[0], day)

        # –ï—Å–ª–∏ –≤ in_out_time —Ö—Ä–∞–Ω–∏—Ç—Å—è False –∑–Ω–∞—á–∏—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ–Ω –Ω–µ –ø—Ä–∏—à–µ–ª. –ï—Å–ª–∏ –¥–µ–Ω—å –±—ã–ª –≤—ã—Ö–æ–¥–Ω—ã–º —Ç–æ–≥–¥–∞ –¥–µ–Ω—å –ø—Ä–æ–ø—É—Å—Ç–∏–º
        if not in_out_time and str(datetime.date.isoweekday(day)) not in config['time']['day_off']:
            missed_days += 1

            # –•—Ä–∞–Ω–∏—Ç: (id, user_id, date, comment, time)
            report = worker_report_dict.get(day)

            # –ï—Å–ª–∏ report –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
            if report and report[3]:
                mesg3 = config['msg']['reason'] + report[3]
            # –ï—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –∏ report –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
            else:
                mesg3 = config['msg']['reason']

            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ö–æ—Ç—è –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—é –∑–Ω–∞—á–∏—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Ç–æ–∂–µ –æ—Å—Ç–∞–≤–∏–ª
            if worker_report_dict[day][5]:
                # –•—Ä–∞–Ω–∏—Ç [latitude, longitude]
                location = worker_report_dict[day][5].split(',')

                # –ü–æ–ª—É—á–∏–º ["–ê–¥—Ä–µ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç(..., –£–ª–∏—Ü–∞, –ì–æ—Ä–æ–¥)", "–°—Å—ã–ª–∫—É –Ω–∞ google maps"] –∏–ª–∏ False –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å geopy
                location_text_url = get_location_address(*location)
                msg4 = f"\n{config['msg']['address']} <a href='{location_text_url[1]}'>{location_text_url[0]}</a>"
            else:
                msg4 = ''

            # –•—Ä–∞–Ω–∏—Ç: "--- 29.03.2022 ---"
            mesg1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                    config['msg']['three_lines'] + '</b>'
            mesg2 = config['msg']['did_not_come']

            # msg2 = mesg1 + '\n' + mesg2 + '\n' + mesg3
            msg2 = mesg1 + '\n' + mesg3 + msg4
            msg2_block_list.append(msg2)

    # –ï—Å–ª–∏ —Ö–æ—Ç—å —Ä–∞–∑ –Ω–µ –ø—Ä–∏—à–µ–ª
    if msg2_block_list:
        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = '\n\n'.join(msg2_block_list)
        msg3 = config['msg']['total_missed'] + ' ' + str(missed_days)
        msg = msg1 + '\n\n' + msg2 + '\n' + config['msg']['lines'] + '\n' + msg3
    else:
        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = config['msg']['no_missed_days']
        msg = msg1 + '\n\n' + msg2

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button,
        disable_web_page_preview=True
    )


async def presence_time_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª 5 –ø—É–Ω–∫—Ç: –í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param state:
    :param callback_query:
    :return:
    """
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: (ID, name, Who, chat_id)
    chosen_worker = all_data['chosen_worker']
    chosen_term = all_data['term']

    # –•—Ä–∞–Ω–∏—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏
    total_presence_time = datetime.timedelta()

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    for day in chosen_days:
        # –ü–æ–ª—É—á–∏–º –≤—Å–µ in/out —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è: [(datetime.time(9, 6, 47), 'DeviceNo'), ...] –∏–ª–∏ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: []
        all_in_outs_one_day = sql_handler.get_all_in_outs_one_day(chosen_worker[0], day)

        mesg1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                config['msg']['three_lines'] + '</b>'

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –∑–Ω–∞—á–∏—Ç –æ–Ω –≤–æ–æ–±—â–µ –Ω–µ –ø—Ä–∏—à–µ–ª
        if not all_in_outs_one_day:
            # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ–º: "–í—ã—Ö–æ–¥–Ω—ã–µ\n –ù–µ –ø—Ä–∏—à–µ–ª"
            if str(datetime.date.isoweekday(day)) in config['time']['day_off']:
                mesg2 = config['msg']['weekend'] + '\n' + config['msg']['dont_came']
            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–µ–ª –≤ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
            else:
                mesg2 = config['msg']['did_not_come']

            # –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ msg2_block_list
            msg2 = mesg1 + '\n' + mesg2
            msg2_block_list.append(msg2)
        else:
            in_device = config['device']['in_device']
            out_device = config['device']['out_device']

            in_time = 0
            # –¢—É—Ç —Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è
            day_presence_time_delta = datetime.timedelta()
            mesg2 = str()
            # –ï—Å–ª–∏ –≤ all_in_outs_one_day –µ—Å—Ç—å 2 in –∏ 2 out, –∑–Ω–∞—á–∏—Ç —Å–æ—Å—Ç–∞–≤–∏–º 2 —Å—Ç—Ä–æ–∫–∏: "in | out\n in | out"
            for i in all_in_outs_one_day:
                # –ï—Å–ª–∏ in_time –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –º—ã –æ–∂–∏–¥–∞–µ–º in_time.
                # !!! –ù–æ –∏–Ω–æ–≥–¥–∞ –ø–æ—Å–ª–µ in –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—è—Ç—å in –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª faceid
                if not in_time:
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ in_device –∫–æ–≥–¥–∞ in_time –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
                    if i[1] == in_device:
                        in_time = i[0]
                        # mesg2 += config['msg']['came'] + ' ' + i[0].strftime('%H:%M')
                    # –ï—Å–ª–∏ in_time –ø—É—Å—Ç –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ out_device, –∑–Ω–∞—á–∏—Ç –ø–æ—Å–ª–µ —É—Ö–æ–¥ –æ–ø—è—Ç—å –ø–æ–ª—É—á–∏–ª–∏ —É—Ö–æ–¥. –ü—Ä–∏—Ö–æ–¥ –º–µ–∂–¥—É –Ω–∏–º–∏
                    # –Ω–µ –±—ã–ª–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ —Ä–∞–±–æ—á–µ–π –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª faceid. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–æ
                    # –≤—Ä–µ–º—è –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ—Ç–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏
                    else:
                        mesg2 += f"{config['msg']['came']}              |  {config['msg']['leaved']} {i[0].strftime('%H:%M')}\n"
                # –ï—Å–ª–∏ in_time –Ω–µ –ø—É—Å—Ç –∑–Ω–∞—á–∏—Ç –º—ã –æ–∂–∏–¥–∞–µ–º out_time
                # !!! –ù–æ –∏–Ω–æ–≥–¥–∞ –ø–æ—Å–ª–µ out –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—è—Ç—å out –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª faceid
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ out_device –∫–æ–≥–¥–∞ in_time –Ω–µ –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
                    if i[1] == out_device:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –±—ã–ª –≤–Ω—É—Ç—Ä–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏
                        in_time_delta = datetime.timedelta(hours=in_time.hour, minutes=in_time.minute,
                                                           seconds=in_time.second)
                        out_time_delta = datetime.timedelta(hours=i[0].hour, minutes=i[0].minute, seconds=i[0].second)
                        presence_time_delta = out_time_delta - in_time_delta
                        day_presence_time_delta += presence_time_delta

                        # –î–æ–±–∞–≤–∏–º —Å—Ç—Ä–æ–∫—É "–ü—Ä–∏—Ö–æ–¥: ... | –£—Ö–æ–¥: ..."
                        mesg2 += f"{config['msg']['came']}  {in_time.strftime('%H:%M')}  |  {config['msg']['leaved']} {i[0].strftime('%H:%M')}\n"

                        # –û–Ω—É–ª–∏—Ä—É–µ–º in_time
                        in_time = 0
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ in_device –∫–æ–≥–¥–∞ in_time –Ω–µ –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ –æ–ø—è—Ç—å –∏–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥ –∏ —É—Ö–æ–¥ –º–µ–∂–¥—É
                    # –Ω–∏–º–∏ —É—Ç–µ—Ä–µ–Ω –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª faceid. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–∏ –º—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ day_presence_time
                    else:
                        # –î–æ–±–∞–≤–∏–º —Å—Ç—Ä–æ–∫—É: –ü—Ä–∏—Ö–æ–¥: ... | –£—Ö–æ–¥: "—Ç—É—Ç –±—É–¥–µ—Ç –ø—É—Å—Ç–æ"
                        mesg2 += f"{config['msg']['came']}  {in_time.strftime('%H:%M')}  |  {config['msg']['leaved']}\n"

                        # –ó–∞–ø–∏—à–µ–º –≤—Ä–µ–º—è –≤ in_time —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü—ã–∫–ª–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è "if not in_time"
                        in_time = i[0]

            # –ò–∑ –¥–µ–ª—å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏–π
            day_presence_time = datetime.datetime.min + day_presence_time_delta

            # –í–º–µ—Å—Ç–æ "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 07:52" —Å–æ–∑–¥–∞–µ–º "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 7 —á–∞—Å–æ–≤ 52 –º–∏–Ω—É—Ç—ã"
            hour = str(day_presence_time.hour)
            minute = str(day_presence_time.minute)
            if hour == '0':
                time = f"{minute} –º–∏–Ω."
            else:
                time = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
            mesg3 = config['msg']['presence_time'] + ' ' + time

            # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ–º: "---date---\n –í—ã—Ö–æ–¥–Ω—ã–µ\n –ü—Ä–∏—Ö–æ–¥: | –£—Ö–æ–¥: ..."
            if str(datetime.date.isoweekday(day)) in config['time']['day_off']:
                # –°–æ–±–µ—Ä–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è(–°–æ —Å—Ç—Ä–æ–∫–æ–π "üóì –í—ã—Ö–æ–¥–Ω—ã–µ") –∏ –¥–æ–±–∞–≤–∏–º –≤ msg2_block_list
                msg2 = mesg1 + '\n' + config['msg']['weekend'] + '\n' + mesg2 + mesg3
            else:
                # –í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è –≤ –æ–±—â—É—é –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
                total_presence_time += day_presence_time_delta

                # –°–æ–±–µ—Ä–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏–º –≤ msg2_block_list
                msg2 = mesg1 + '\n' + mesg2 + mesg3

            msg2_block_list.append(msg2)

    # –ò–∑ –¥–µ–ª—å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
    presence_time = datetime.datetime.min + total_presence_time
    if presence_time.day == 1:
        hour = str(presence_time.hour)
        minute = str(presence_time.minute)
        if hour == '0':
            total_presence = f"{minute} –º–∏–Ω."
        else:
            total_presence = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
    else:
        day = int(presence_time.strftime('%d')) - 1
        hour = str(presence_time.hour)
        minute = str(presence_time.minute)
        if hour == '0':
            total_presence = f"{str(day)} –¥–Ω–µ–π {minute} –º–∏–Ω."
        else:
            total_presence = f"{str(day)} –¥–Ω–µ–π {hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."

        total_presence = total_presence.lstrip('0')

    msg1 = config['msg']['you_chose'] + chosen_worker[1]
    msg2 = '\n\n'.join(msg2_block_list)
    # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: "–ò—Ç–æ–≥–æ –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 31:24"
    msg3 = config['msg']['total_presence_time'] + ' ' + total_presence

    msg = msg1 + '\n\n' + msg2 + '\n' + config['msg']['lines'] + '\n' + msg3

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )


async def geolocation_report_type_handler(callback_query_or_message: types.message, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª 6-–ø—É–Ω–∫—Ç: –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param callback_query_or_message:
    :param state:
    :return:
    """
    try:
        message_id = callback_query_or_message.message.message_id
    except:
        message_id = callback_query_or_message.message_id

    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query_or_message.bot.delete_message(
                callback_query_or_message.message.chat.id,
                message_id - i
            )
    except:
        pass

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: (ID, name, Who, chat_id)
    chosen_worker = all_data['chosen_worker']
    chosen_term = all_data['term']

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "report" –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –ø–æ id —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫:  [(id, user_id, date, comment, time, location), ...], –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–Ω—å
    worker_report_list = sql_handler.get_data_by_term(chosen_worker[0], chosen_term)

    # –ï—Å–ª–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ —Ö–æ—Ç—å —Ä–∞–∑ –æ–ø–æ–∑–¥–∞–ª –∏–ª–∏ –Ω–µ –ø—Ä–∏—à–µ–ª
    if worker_report_list:
        # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å: [(id, user_id, date, comment, time, location), ...]
        reports_with_location = []

        # –ï—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —Ç–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º —ç—Ç–æ—Ç report –≤ reports_with_location
        for report in worker_report_list:
            if report[5]:
                reports_with_location.append(report)

        reports_with_location.reverse()
        # –ï—Å–ª–∏ –æ–ø–æ–∑–¥–∞–≤—à–∏–π —Ö–æ—Ç—å —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —Ç–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ–º –∏—Ö –∞–¥–º–∏–Ω—É
        if reports_with_location:
            locations_buttons_list = []
            # –ö–∞–∂–¥—ã–π —Ü—ã–∫–ª —Å–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É inline –∫–Ω–æ–ø–∫—É: '12.05.2022'
            for report in reports_with_location:
                button_text = report[2].strftime('%d.%m.%Y')
                callback_data = 'location_button' + str(report[0])
                locations_buttons_list.append([[button_text, callback_data]])

            locations_buttons_list.append([[config['msg']['back'], 'back'], [config['msg']['main_menu'], 'main_menu']])
            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π report —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–º
            buttons = button_creators.inline_keyboard_creator(locations_buttons_list)

            msg = config['msg']['choose_one_location_report']

            await callback_query_or_message.bot.send_message(
                callback_query_or_message.from_user.id,
                msg,
                reply_markup=buttons
            )
        # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–ø–æ–∑–¥–∞–ª –∏–ª–∏ –Ω–µ –ø—Ä–∏—à–µ–ª –Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é"
        else:
            msg = config['msg']['did_not_leave_comment_location']
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            buttons = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

            await callback_query_or_message.bot.send_message(
                callback_query_or_message.from_user.id,
                msg,
                reply_markup=buttons
            )

    # –ï—Å–ª–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ–ø–æ–∑–¥–∞–ª –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ä–∞–±–æ—Ç—É
    else:
        msg = config['msg']['no_violation']
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        buttons = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

        await callback_query_or_message.bot.send_message(
            callback_query_or_message.from_user.id,
            msg,
            reply_markup=buttons
        )


async def chosen_geolocation_day_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ inline –∫–Ω–æ–ø–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑–∞–ª geolocation_report_type_handler.
    :param callback_query:
    :param state:
    :return: –¢–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ
    """
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    except:
        pass

    # –ú–µ–Ω—è–µ–º state —á—Ç–æ–±—ã —Å –ø–æ–º–æ—â—å—é reply –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –æ–Ω –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥ (–≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π)
    await MyStates.waiting_for_location.set()

    report_id = callback_query.data.replace('location_button', '')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ report: (id, user_id, date, comment, time, location)
    report = sql_handler.get_report_by_id(report_id)

    # –•—Ä–∞–Ω–∏—Ç [latitude, longitude]
    location = report[5].split(',')
    name = sql_handler.get_user_name(int(report[1]))
    comment = report[3]

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(report[2].strftime('%d.%m.%Y')) + ' ' + \
           config['msg']['three_lines'] + '</b>'
    msg2 = config['msg']['you_chose'] + ' ' + name

    user_in_check = sql_handler.get_user_in_history(report[1], report[2])
    # –ï—Å–ª–∏ user_in_check –Ω–µ —Ä–∞–≤–Ω–æ False, –∑–Ω–∞—á–∏—Ç –æ–Ω –ø—Ä–∏—à–∏–ª. –ó–Ω–∞—á–∏—Ç –æ–Ω –æ–ø–æ–∑–¥–∞–ª
    if user_in_check:
        msg3 = config['msg']['violation'] + ' ' + config['msg']['late']
    else:
        msg3 = config['msg']['violation'] + ' ' + config['msg']['missed']
    msg4 = config['msg']['reason'] + ' ' + comment

    # –ü–æ–ª—É—á–∏–º ["–ê–¥—Ä–µ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç(..., –£–ª–∏—Ü–∞, –ì–æ—Ä–æ–¥)", "–°—Å—ã–ª–∫—É –Ω–∞ google maps"] –∏–ª–∏ False –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å geopy
    location_text_url = get_location_address(*location)

    # –ï—Å–ª–∏ location_text_url —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª –∞–¥—Ä–µ—Å –∏ —Å—Å—ã–ª–∫—É –Ω–∞ google maps:
    if location_text_url:
        msg5 = f"\n{config['msg']['address']} <a href='{location_text_url[1]}'>{location_text_url[0]}</a>"
    else:
        msg5 = ''

    msg = msg1 + '\n' + msg2 + '\n' + msg3 + '\n' + msg4 + msg5
    buttons = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–ø–µ—Ä–≤–∞ –ª–æ–∫–∞—Ü–∏—é
    await callback_query.bot.send_location(
        callback_query.from_user.id,
        latitude=location[0],
        longitude=location[1]
    )

    try:
        # –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (
        await callback_query.bot.send_message(
            callback_query.from_user.id,
            msg,
            reply_markup=buttons,
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —Å–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π id (—Ç–æ–µ—Å—Ç—å id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–æ –Ω–µ–≥–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é), —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ reply_to_message_id
            reply_to_message_id=callback_query.message.message_id+1,
            disable_web_page_preview=True
        )
    except:
        await callback_query.bot.send_message(
            callback_query.from_user.id,
            msg,
            reply_markup=buttons,
            disable_web_page_preview=True
        )


async def geolocation_day_page_buttons(message: types.Message, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    :param message:
    :param state:
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(3):
            await message.bot.delete_message(message.chat.id, message.message_id - i)
    except:
        pass

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ —Ç–æ –≤–µ—Ä–Ω–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π
    if message.text == config['msg']['back']:
        await geolocation_report_type_handler(message, state)
    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–æ —É–¥–∞–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif message.text == config['msg']['main_menu']:
        await main_menu(message, state)


async def all_data_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª 7-–ø—É–Ω–∫—Ç: –ó–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ one_worker_report_handler
    :param callback_query:
    :param state:
    :return:
    """
    if True:
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(2):
                await callback_query.bot.delete_message(
                    callback_query.message.chat.id,
                    callback_query.message.message_id - i
                )
        except:
            pass

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
        await MyStates.waiting_report_page_buttons.set()

        all_data = await state.get_data()
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: (ID, name, Who, chat_id)
        chosen_worker = all_data['chosen_worker']
        chosen_term = all_data['term']

        # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏–π
        total_late_hours = datetime.timedelta()
        # –•—Ä–∞–Ω–∏—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è(—Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)
        total_early_lived_time = datetime.timedelta()
        # –•—Ä–∞–Ω–∏—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏
        total_presence_time = datetime.timedelta()
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏—à–µ–ª
        missed_days = 0

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "report" –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –ø–æ id —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫:  [(id, user_id, date, comment, time, location), ...], –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–Ω—å
        worker_report_list = sql_handler.get_data_by_term(chosen_worker[0], chosen_term)
        # –ò–∑ worker_report_list —Å–æ–∑–¥–∞–¥–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {date: (id, user_id, date, comment, time), ...}
        worker_report_dict = {}
        for day in worker_report_list:
            worker_report_dict[day[2]] = day

        # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
        chosen_days = []
        for i in range(int(chosen_term)):
            day = datetime.datetime.now().date() - datetime.timedelta(days=i)
            chosen_days.append(day)
        chosen_days.reverse()

        msg2_block_list = []
        for day in chosen_days:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã:  (in_time, out_time) –∏–ª–∏ (in_time, False) –∏–ª–∏ False
            in_out_time = sql_handler.get_user_in_out_history(chosen_worker[0], day)

            # –ü–æ–ª—É—á–∏–º ("–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 2 —á–∞—Å–æ–≤ 42 –º–∏–Ω—É—Ç—ã", timedelta)
            presence_text_timedelta = calc_presence_time(chosen_worker[0], day)

            # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ(date) –≤—ã—Ö–æ–¥–Ω–æ–π, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ–º: "üóì –í—ã—Ö–æ–¥–Ω—ã–µ\n –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ | –í—Ä–µ–º—è —É—Ö–æ–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "üóì –í—ã—Ö–æ–¥–Ω—ã–µ\n –ù–µ –ø—Ä–∏—à–µ–ª"
            if str(datetime.date.isoweekday(day)) in config['time']['day_off']:
                mesg1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                        config['msg']['three_lines'] + '</b>'
                mesg2 = config['msg']['weekend']

                # –ï—Å–ª–∏ –≤ in_out_time: False
                if not in_out_time:
                    mesg3 = config['msg']['dont_came']
                    mesg4 = ''
                # –ï—Å–ª–∏ –≤ in_out_time: (in_time, out_time)
                elif in_out_time[0] and in_out_time[1]:
                    mesg3_1 = config['msg']['came'] + ' ' + in_out_time[0].strftime('%H:%M')
                    mesg3_2 = config['msg']['leaved'] + ' ' + in_out_time[1].strftime('%H:%M')
                    mesg3 = mesg3_1 + '  <b>|</b>  ' + mesg3_2

                    # –ü–æ–ª—É—á–∏–º "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 2 —á–∞—Å–æ–≤ 42 –º–∏–Ω—É—Ç—ã". –ù–æ timedelta –Ω–µ –¥–æ–±–∞–≤–∏–º –≤ total_presence_time —Ç–∞–∫ –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π
                    mesg4 = '\n' + presence_text_timedelta[0]
                # –ï—Å–ª–∏ –≤ in_out_time: (in_time, False)
                else:
                    mesg3_1 = config['msg']['came'] + ' ' + in_out_time[0].strftime('%H:%M')
                    mesg3_2 = config['msg']['leaved']
                    mesg3 = mesg3_1 + '  <b>|</b>  ' + mesg3_2

                    # –ü–æ–ª—É—á–∏–º "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 2 —á–∞—Å–æ–≤ 42 –º–∏–Ω—É—Ç—ã". –ù–æ timedelta –Ω–µ –¥–æ–±–∞–≤–∏–º –≤ total_presence_time —Ç–∞–∫ –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π
                    mesg4 = '\n' + presence_text_timedelta[0]

                # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg2 = mesg1 + '\n' + mesg2 + '\n' + mesg3 + mesg4

                # –î–æ–±–∞–≤–∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ msg2_block_list
                msg2_block_list.append(msg2)

                # –í—Å–µ —á—Ç–æ –≤–Ω–∏–∑—É –ø—Ä–æ–ø—É—Å—Ç–∏–º
                continue

            # if day in worker_report_dict:
            # –¢–∞–∫ –∫–∞–∫ in_out_time == False, –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ –ø—Ä–∏—à–µ–ª
            if not in_out_time:
                mesg1 = config['msg']['did_not_come']

                if worker_report_dict.get(day) and worker_report_dict[day][3]:
                    mesg2 = config['msg']['reason'] + ' ' + worker_report_dict[day][3]
                else:
                    mesg2 = config['msg']['reason']

                msg2_2 = mesg1 + '\n' + mesg2
                missed_days += 1
            # –ï—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º, —Å–æ—Å—Ç–∞–≤–∏–º –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ. worker_report_dict[day] —Ö—Ä–∞–Ω–∏—Ç (id, user_id, date, comment, time)
            # –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ worker_report_dict –∏ —Å—Ç–æ–ª–±–µ—Ü time –∏–º–µ–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç –æ–Ω –ø—Ä–∏—à–µ–ª —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º
            elif worker_report_dict.get(day) and worker_report_dict[day][4]:
                mesg1 = config['msg']['came'] + ' ' + str(worker_report_dict[day][4].strftime("%H:%M"))

                # –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç –æ–Ω –æ–ø–æ–∑–¥–∞–ª
                beginning_delta = datetime.timedelta(hours=int(config['time']['start_hour']),
                                                     minutes=int(config['time']['start_minute']))
                came_time = worker_report_dict[day][4]
                came_time_delta = datetime.timedelta(hours=came_time.hour, minutes=came_time.minute,
                                                     seconds=came_time.second)
                late_time_in_seconds = came_time_delta - beginning_delta
                late_time = (datetime.datetime.min + late_time_in_seconds).time()

                # –í–º–µ—Å—Ç–æ "–û–ø–æ–∑–¥–∞–ª –Ω–∞: 07:52" —Å–æ–∑–¥–∞–µ–º "–û–ø–æ–∑–¥–∞–ª –Ω–∞: 7 —á–∞—Å–æ–≤ 52 –º–∏–Ω—É—Ç—ã"
                hour = str(late_time.hour)
                minute = str(late_time.minute)
                if hour == '0':
                    time = f"{minute} –º–∏–Ω."
                else:
                    time = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
                # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ: "–û–ø–æ–∑–¥–∞–ª –Ω–∞: 7 —á–∞—Å–æ–≤ 52 –º–∏–Ω—É—Ç—ã"
                mesg3 = config['msg']['late_by'] + ' ' + time

                # –ü—Ä–∏–±–∞–≤–∏–º –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è –≤ —Å—É–º–º–∞—Ä–Ω—É—é delta
                total_late_hours += late_time_in_seconds

                if worker_report_dict[day][3]:
                    mesg4 = config['msg']['reason'] + ' ' + worker_report_dict[day][3]
                else:
                    mesg4 = config['msg']['reason']

                # –ü–æ–ª—É—á–∏—Ç (msg, timedelta): "–£—à–µ–ª –≤: 19:20" –∏–ª–∏ "–£—à–µ–ª –≤: 15:20\n –£—à–µ–ª —Ä–∞:–Ω—å—à–µ —á–µ–º 3:40" –∏–ª–∏ "–£—à–µ–ª –≤: –ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö"
                # timedelta: —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                out_check = early_leave_check(in_out_time[1])
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ –∏ —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞
                mesg2_5 = out_check[0]
                if '#' in mesg2_5:
                    ms = mesg2_5.split('#')
                    mesg2 = ms[0]
                    mesg5 = f"\n{ms[1]}"
                else:
                    mesg2 = mesg2_5
                    mesg5 = ''
                # –ü—Ä–∏–±–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞(–µ—Å–ª–∏ –æ–Ω —É—à–µ–ª —Ä–∞–Ω—å—à–µ. –ê –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ timedelta = 0)
                total_early_lived_time += out_check[1]

                # –ü—Ä–∏–±–∞–≤–∏–º –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ –æ–±—â—É—é –¥–µ–ª—å—Ç—É
                total_presence_time += presence_text_timedelta[1]
                # –ü–æ–ª—É—á–∏–º "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 2 —á–∞—Å–æ–≤ 42 –º–∏–Ω—É—Ç—ã". –ù–æ timedelta –Ω–µ –¥–æ–±–∞–≤–∏–º –≤ total_presence_time —Ç–∞–∫ –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π
                mesg6 = presence_text_timedelta[0]

                # –•—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ "–ü—Ä–∏—Ö–æ–¥: | –£—Ö–æ–¥:\n –û–ø–æ–∑–¥–∞–ª –Ω–∞:\n –ü—Ä–∏—á–∏–Ω–∞:\n –í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:"
                msg2_2 = mesg1 + '  <b>|</b>  ' + mesg2 + '\n' + mesg3 + '\n' + mesg4 + mesg5 + '\n' + mesg6
            # –ï—Å–ª–∏ in_out_time –Ω–µ False –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ report –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å, –∑–Ω–∞—á–∏—Ç –æ–Ω –ø—Ä–∏—à–µ–ª –≤–æ –≤—Ä–µ–º—è
            else:
                mesg1 = config['msg']['came'] + ' ' + in_out_time[0].strftime("%H:%M")

                # –ü–æ–ª—É—á–∏—Ç (msg, timedelta): "–£—à–µ–ª –≤: 19:20" –∏–ª–∏ "–£—à–µ–ª –≤: 15:20\n –£—à–µ–ª —Ä–∞–Ω—å—à–µ —á–µ–º: 3:40" –∏–ª–∏ "–£—à–µ–ª –≤: –ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö"
                # timedelta: —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                out_check = early_leave_check(in_out_time[1])
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ –∏ —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞
                mesg2_5 = out_check[0]
                if '#' in mesg2_5:
                    ms = mesg2_5.split('#')
                    mesg2 = ms[0]
                    mesg3 = f"\n{ms[1]}"
                else:
                    mesg2 = mesg2_5
                    mesg3 = ''

                # –ü—Ä–∏–±–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞(–µ—Å–ª–∏ –æ–Ω —É—à–µ–ª —Ä–∞–Ω—å—à–µ. –ê –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ timedelta = 0)
                total_early_lived_time += out_check[1]

                # –ü—Ä–∏–±–∞–≤–∏–º –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ –æ–±—â—É—é –¥–µ–ª—å—Ç—É
                total_presence_time += presence_text_timedelta[1]
                # –ü–æ–ª—É—á–∏–º "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 2 —á–∞—Å–æ–≤ 42 –º–∏–Ω—É—Ç—ã". –ù–æ timedelta –Ω–µ –¥–æ–±–∞–≤–∏–º –≤ total_presence_time —Ç–∞–∫ –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π
                mesg4 = presence_text_timedelta[0]

                # –•—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ "–ü—Ä–∏—Ö–æ–¥:\n –£—à–µ–ª –≤: "
                msg2_2 = mesg1 + '  <b>|</b>  ' + mesg2 + mesg3 + '\n' + mesg4

            msg2_1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                     config['msg']['three_lines'] + '</b>'
            msg2 = msg2_1 + '\n' + msg2_2

            # –î–æ–±–∞–≤–∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ msg2_block_list
            msg2_block_list.append(msg2)

        # –ò–∑ –¥–µ–ª—å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏–π
        total_late_time = datetime.datetime.min + total_late_hours
        if total_late_time.day == 1:
            hour = str(total_late_time.hour)
            minute = str(total_late_time.minute)
            if hour == '0':
                total_late = f"{minute} –º–∏–Ω."
            else:
                total_late = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
        else:
            day = int(total_late_time.strftime('%d')) - 1
            hour = str(total_late_time.hour)
            minute = str(total_late_time.minute)
            if hour == '0':
                total_late = f"{str(day)} –¥–Ω–µ–π {minute} –º–∏–Ω."
            else:
                total_late = f"{str(day)} –¥–Ω–µ–π {hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."

            total_late = total_late.lstrip('0')

        # –ò–∑ –¥–µ–ª—å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º—è —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞
        total_early_time = datetime.datetime.min + total_early_lived_time
        if total_early_time.day == 1:
            hour = str(total_early_time.hour)
            minute = str(total_early_time.minute)
            if hour == '0':
                total_early = f"{minute} –º–∏–Ω."
            else:
                total_early = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
        else:
            day = int(total_early_time.strftime('%d')) - 1
            hour = str(total_early_time.hour)
            minute = str(total_early_time.minute)
            if hour == '0':
                total_early = f"{str(day)} –¥–Ω–µ–π {minute} –º–∏–Ω."
            else:
                total_early = f"{str(day)} –¥–Ω–µ–π {hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."

            total_early = total_early.lstrip('0')

        # –ò–∑ –¥–µ–ª—å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        presence_time = datetime.datetime.min + total_presence_time
        if presence_time.day == 1:
            hour = str(presence_time.hour)
            minute = str(presence_time.minute)
            if hour == '0':
                total_presence = f"{minute} –º–∏–Ω."
            else:
                total_presence = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
        else:
            day = int(presence_time.strftime('%d')) - 1
            hour = str(presence_time.hour)
            minute = str(presence_time.minute)
            if hour == '0':
                total_presence = f"{str(day)} –¥–Ω–µ–π {minute} –º–∏–Ω."
            else:
                total_presence = f"{str(day)} –¥–Ω–µ–π {hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."

            total_presence = total_presence.lstrip('0')

        msg3_1 = config['msg']['total_late'] + ' ' + total_late
        msg3_2 = config['msg']['total_early'] + ' ' + total_early
        msg3_3 = config['msg']['total_missed'] + ' ' + str(missed_days)
        msg3_4 = config['msg']['total_presence_time'] + ' ' + total_presence

        msg1 = config['msg']['you_chose'] + chosen_worker[1]
        msg2 = '\n\n'.join(msg2_block_list)
        msg3 = msg3_1 + '\n' + msg3_2 + '\n' + msg3_3
        msg = msg1 + '\n\n' + msg2 + '\n' + config['msg']['lines'] + '\n' + msg3 + '\n' + msg3_4

        # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
        await callback_query.bot.send_message(
            callback_query.from_user.id,
            msg,
            reply_markup=button
        )


async def report_page_buttons(message: types.Message, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª –æ—Ç—á–µ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    :param message:
    :param state:
    :return:
    """
    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ —Ç–æ –≤–µ—Ä–Ω–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞(6 –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ inline –∫–Ω–æ–ø–æ–∫)
    if message.text == config['msg']['back']:
        await chosen_term_handler(message, state)
    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–æ —É–¥–∞–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif message.text == config['msg']['main_menu']:
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(2):
                await message.bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass

        await main_menu(message, state)


async def all_workers_report_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤".
    :param callback_query:
    :param state:
    :return: –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
    """
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.from_user.id,
                message_id=callback_query.message.message_id - i
            )
    except:
        pass

    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π
    await state.update_data(term=None)

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting_for_term
    await MyStates.all_workers_waiting_for_term.set()

    # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è: "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (1-30 –¥–Ω–µ–π):"
    msg = config['msg']['term']

    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )


async def all_workers_chosen_term_handler(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ -> —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç—á–µ—Ç–∞ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å(1-31)"
    –ò–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –∫–∞–∫–∞–≥–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    :param message:
    :param state:
    :return: 3 –ø—É–Ω–∫—Ç–∞ (–û–ø–æ–∑–¥–∞–Ω–∏–µ, –†–∞–Ω–Ω–∏–π —É—Ö–æ–¥, –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏)
    """
    str_numbers = [str(i) for i in range(1, 31)]

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (1-30):
    chosen_term = all_data.get('term')

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30 –∏–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥:
    if message.text.strip() in str_numbers or (message.text == config['msg']['back'] and chosen_term):
        # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω(–ï—Å–ª–∏ –µ–≥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –±—ã–ª–æ, –µ—Å–ª–∏ –±—ã–ª–æ –∑–Ω–∞—á–∏—Ç –æ–Ω –≤–µ—Ä–Ω—É–ª—Å—è —Å—é–¥–∞ –∏–∑ —Å–ª–µ–¥. –º–µ–Ω—é
        if not chosen_term:
            await state.update_data(term=message.text.strip())

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ all_workers_waiting_for_term
        await MyStates.all_workers_waiting_for_report_type.set()

        # –°–æ–∑–¥–∞–µ–º 3 inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons_list = [
            [[config['msg']['late_report_type'], 'all_workers_late_report_type']],
            [[config['msg']['early_leaved_report_type'], 'all_workers_early_leaved_report_type']],
            [[config['msg']['missed_days_report_type'], 'all_workers_missed_days_report_type']],
            [[config['msg']['back'], 'back'], [config['msg']['main_menu'], 'main_menu']]
        ]
        inline_button = button_creators.inline_keyboard_creator(buttons_list, row_width=2)

        msg = config['msg']['choose_report_type']

        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(2):
                await message.bot.delete_message(
                    message.chat.id,
                    message.message_id - i
                )
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 3 inline –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(msg, reply_markup=inline_button)

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤–º–µ—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, —Ç–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ (3 –≤–∏–¥–∞ –æ—Ç—á–µ—Ç–∞)
    elif message.text == config['msg']['back']:
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(2):
                await message.bot.delete_message(
                    message.chat.id,
                    message.message_id - i
                )
        except:
            pass

        # –û—Ç–∫–ª—é—á–∞–µ–º state "all_workers_waiting_for_term"
        await state.finish()

        # –í–µ—Ä–Ω–µ–º report_menu —á—Ç–æ–±—ã –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –¥—Ä—É–≥–æ–π –≤–∏–¥ –æ—Ç—á–µ—Ç–∞
        await report_menu(message, state)

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    else:
        # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(2):
                await message.bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass

        msg = config['msg']['wrong_term']
        await message.answer(msg, reply_markup=button)


async def all_workers_late_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –µ—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"  ->  "–û–ø–æ–∑–¥–∞–Ω–∏–µ"
    :param callback_query:
    :param state:
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–∏–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –°–µ–∫—É–Ω–¥–æ—á–∫—É
    await callback_query.answer(
        config['msg']['wait']
    )

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.all_workers_waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (1-30):
    chosen_term = all_data['term']

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö(who=control): [(ID, name, Who, chat_id), ...]
    all_workers = sql_handler.get_all_workers()

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    # –ö–∞–∂–¥—ã–π —Ü—ã–∫–ª —Å–æ—Å—Ç–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
    # "--- 28.03.2022 ---\n 9:10 –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä \n 10:40 –®–µ—Ä–∏–±–∞–µ–≤ –ê–∑–∏–∑–±–µ–∫\n ..."
    for day in chosen_days:
        msg2_1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                 config['msg']['three_lines'] + '</b>\n'

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ(date) –≤—ã—Ö–æ–¥–Ω–æ–π, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ–º: "--- 10.04.2022 ---\n üóì –í—ã—Ö–æ–¥–Ω—ã–µ"
        if str(datetime.date.isoweekday(day)) in config['time']['day_off']:
            msg2_2 = config['msg']['weekend']
            msg2_block_list.append(msg2_1 + msg2_2)
        else:
            # –ß—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—à–µ–ª –ª–∏ –æ–Ω –≤–æ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ timedelta —Ñ–æ—Ä–º–∞—Ç–µ
            start_hour = int(config['time']['start_hour'])
            start_minute = int(config['time']['start_minute']) + 10
            start_time = datetime.timedelta(hours=start_hour, minutes=start_minute)

            # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—á–∏—Ö –∫—Ç–æ –æ–ø–æ–∑–¥–∞–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ: {time: "9:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä", ...}
            latecomer_users_in_day = {}

            # –ö–∞–∂–¥—ã–π —Ü—ã–∫–ª —Å–æ—Å—Ç–∞–≤–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ø—Ä–æ –æ–¥–Ω–æ–≥–æ –æ–ø–æ–∑–¥–∞–≤—à–µ–≥–æ —á–µ–ª–µ–≤–µ–∫–∞: "9:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä"
            for worker in all_workers:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞—É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã: in_time –∏–ª–∏ False –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–µ–ª
                in_time = sql_handler.get_user_in_history(worker[0], day)

                # –ï—Å–ª–∏ in_time –Ω–µ —Ä–∞–≤–Ω–æ False
                if in_time:
                    # –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–ø–æ–∑–¥–∞–ª –ª–∏ –æ–Ω –∏–ª–∏ –Ω–µ—Ç
                    came_time = datetime.timedelta(
                        hours=in_time[0].hour,
                        minutes=in_time[0].minute,
                        seconds=in_time[0].second
                    )

                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –±–æ–ª—å—à–µ —á–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã(+10–º–∏–Ω), –∑–Ω–∞—á–∏—Ç –æ–Ω –æ–ø–æ–∑–¥–∞–ª
                    if came_time > start_time:
                        came_time_str = in_time[0].strftime('%H:%M')
                        # –í latecomer_users_in_day –¥–æ–±–∞–≤–∏–º: "9:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä"
                        mesg1 = f"<b>{came_time_str}</b>  {worker[1]}"
                        latecomer_users_in_day[in_time[0]] = mesg1

            # –ï—Å–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ –æ–ø–æ–∑–¥–∞–ª
            if latecomer_users_in_day:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
                # –•—Ä–∞–Ω–∏—Ç [(time, "9:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä"), ...]
                latecomer_users_list = list(latecomer_users_in_day.items())
                latecomer_users_list.sort(key=lambda item: item[0])
                latecomer_users_list = list(map(lambda it: it[1], latecomer_users_list))

                msg2_3 = '\n'.join(latecomer_users_list)
            else:
                msg2_3 = config['msg']['no_latecomers']

            msg2_block_list.append(msg2_1 + msg2_3)

    msg1 = f"<b>{config['msg']['late_report_type']}</b>"
    msg2 = '\n\n'.join(msg2_block_list)
    msg = msg1 + '\n\n' + msg2

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )


async def all_workers_early_leaved_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –µ—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"  ->  "–†–∞–Ω–Ω–∏–π —É—Ö–æ–¥"
    :param callback_query:
    :param state:
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–∏–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –°–µ–∫—É–Ω–¥–æ—á–∫—É
    await callback_query.answer(
        config['msg']['wait']
    )

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.all_workers_waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: (ID, name, Who, chat_id)
    chosen_term = all_data['term']

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö(who=control): [(ID, name, Who, chat_id), ...]
    all_workers = sql_handler.get_all_workers()

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    for day in chosen_days:
        msg2_1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                 config['msg']['three_lines'] + '</b>\n'

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ(date) –≤—ã—Ö–æ–¥–Ω–æ–π, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ–º: "--- 10.04.2022 ---\n üóì –í—ã—Ö–æ–¥–Ω—ã–µ"
        if str(datetime.date.isoweekday(day)) in config['time']['day_off']:
            msg2_2 = config['msg']['weekend']
            msg2_block_list.append(msg2_1 + msg2_2)
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ(date) –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π
        else:
            # –ß—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—à–µ–ª –ª–∏ –æ–Ω –≤–æ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ timedelta —Ñ–æ—Ä–º–∞—Ç–µ
            end_hour = int(config['time']['end_hour'])
            end_minute = int(config['time']['end_minute'])
            end_time = datetime.timedelta(hours=end_hour, minutes=end_minute) - datetime.timedelta(minutes=10)

            # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—á–∏—Ö –∫—Ç–æ —É—à–µ–ª —Ä–∞–Ω—å—à–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ: {time: "9:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä", ...}
            early_leaved_users_in_day = {}

            # –ö–∞–∂–¥—ã–π —Ü—ã–∫–ª —Å–æ—Å—Ç–∞–≤–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ø—Ä–æ –æ–¥–Ω–æ–≥–æ —á–µ–ª–µ–≤–µ–∫–∞ –∫—Ç–æ —É—à–µ–ª —Ä–∞–Ω—å—à–µ: "9:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä"
            for worker in all_workers:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã: out_time –∏–ª–∏ False
                out_time = sql_handler.get_user_out_history(worker[0], day)

                # –ï—Å–ª–∏ out_time –Ω–µ —Ä–∞–≤–Ω–æ False
                if out_time:
                    # –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º —É—à–µ–ª –ª–∏ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –Ω–µ—Ç
                    leave_time = datetime.timedelta(
                        hours=out_time[0].hour,
                        minutes=out_time[0].minute,
                        seconds=out_time[0].second
                    )

                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ –º–µ–Ω—å—à–µ —á–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∑–Ω–∞—á–∏—Ç –æ–Ω —É—à–µ–ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
                    if leave_time < end_time:
                        leave_time_str = out_time[0].strftime('%H:%M')
                        # –í early_leaved_users_in_day –¥–æ–±–∞–≤–∏–º: "17:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä"
                        mesg1 = f"<b>{leave_time_str}</b>  {worker[1]}"
                        early_leaved_users_in_day[out_time[0]] = mesg1

            # –ï—Å–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ —É—à–µ–ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
            if early_leaved_users_in_day:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–æ —É—à–µ–¥—à–∏—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
                # –•—Ä–∞–Ω–∏—Ç [(time, "9:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä"), ...]
                early_leaved_users_list = list(early_leaved_users_in_day.items())
                early_leaved_users_list.sort(key=lambda item: item[0])
                early_leaved_users_list = list(map(lambda it: it[1], early_leaved_users_list))

                msg2_3 = '\n'.join(early_leaved_users_list)
            else:
                msg2_3 = config['msg']['no_early_leaved']

            msg2_block_list.append(msg2_1 + msg2_3)

    msg1 = f"<b>{config['msg']['early_leaved_report_type']}</b>"
    msg2 = '\n\n'.join(msg2_block_list)
    msg = msg1 + '\n\n' + msg2

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )


async def all_workers_missed_days_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –µ—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"  ->  "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏"
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–∏–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –°–µ–∫—É–Ω–¥–æ—á–∫—É
    await callback_query.answer(
        config['msg']['wait']
    )

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª
    await MyStates.all_workers_waiting_report_page_buttons.set()

    all_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (1-30):
    chosen_term = all_data['term']

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö(who=control): [(ID, name, Who, chat_id), ...]
    all_workers = sql_handler.get_all_workers()

    # –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ date() —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ü–∏–∫–ª–∞: [..., datetime.datetime.now().date()]
    chosen_days = []
    for i in range(int(chosen_term)):
        day = datetime.datetime.now().date() - datetime.timedelta(days=i)
        chosen_days.append(day)
    chosen_days.reverse()

    msg2_block_list = []
    # –ö–∞–∂–¥—ã–π —Ü—ã–∫–ª —Å–æ—Å—Ç–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
    # "--- 28.03.2022 ---\n –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä \n –®–µ—Ä–∏–±–∞–µ–≤ –ê–∑–∏–∑–±–µ–∫\n ..."
    for day in chosen_days:
        msg2_1 = '<b>üìç ' + config['msg']['three_lines'] + ' ' + str(day.strftime('%d.%m.%Y')) + ' ' + \
                 config['msg']['three_lines'] + '</b>\n'

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ(date) –≤—ã—Ö–æ–¥–Ω–æ–π, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ–º: "--- 10.04.2022 ---\n üóì –í—ã—Ö–æ–¥–Ω—ã–µ"
        if str(datetime.date.isoweekday(day)) in config['time']['day_off']:
            msg2_2 = config['msg']['weekend']
            msg2_block_list.append(msg2_1 + msg2_2)
        else:
            # –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –∫—Ç–æ –Ω–µ –ø—Ä–∏—à–µ–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ: ["–ê–ª–∏–º–æ–≤ –ê–ª–∏—à–µ—Ä", ...]
            missed_users_in_day = []

            # –ö–∞–∂–¥—ã–π —Ü—ã–∫–ª —Å–æ—Å—Ç–∞–≤–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ø—Ä–æ –æ–¥–Ω–æ–≥–æ –æ–ø–æ–∑–¥–∞–≤—à–µ–≥–æ —á–µ–ª–µ–≤–µ–∫–∞: "9:10  –ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä"
            for worker in all_workers:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞—É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã: in_time –∏–ª–∏ False –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–µ–ª
                in_time = sql_handler.get_user_in_history(worker[0], day)

                # –ï—Å–ª–∏ in_time —Ä–∞–≤–Ω–æ False, –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ –ø—Ä–∏—à–µ–ª
                if not in_time:
                    # –í latecomer_users_in_day –¥–æ–±–∞–≤–∏–º: "–ê–±–¥—É–≤–æ—Å–∏–∫–æ–≤ –ñ–∞–≤–æ—Ö–∏—Ä"
                    missed_users_in_day.append(worker[1])

            # –ï—Å–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ –Ω–µ –ø—Ä–∏—à–µ–ª
            if missed_users_in_day:
                msg2_3 = '\n'.join(missed_users_in_day)
            else:
                msg2_3 = config['msg']['no_missed']

            msg2_block_list.append(msg2_1 + msg2_3)

    msg1 = f"<b>{config['msg']['missed_days_report_type']}</b>"
    msg2 = '\n\n'.join(msg2_block_list)
    msg = msg1 + '\n\n' + msg2

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

    await callback_query.bot.send_message(
        callback_query.from_user.id,
        msg,
        reply_markup=button
    )


async def all_workers_report_page_buttons(message: types.Message, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª –æ—Ç—á–µ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    :param message:
    :param state:
    :return:
    """
    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ —Ç–æ –≤–µ—Ä–Ω–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞(3 –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ inline –∫–Ω–æ–ø–æ–∫)
    if message.text == config['msg']['back']:
        await all_workers_chosen_term_handler(message, state)
    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–æ —É–¥–∞–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif message.text == config['msg']['main_menu']:
        # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(2):
                await message.bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass

        await main_menu(message, state)


async def excel_report_type_handler(callback_query_or_message: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "üìä –û—Ç—á–µ—Ç –≤ excel" excel_report –∏–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω—é
    :param callback_query_or_message:
    :param state:
    :return: Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º 30 –¥–Ω–µ–π
    """
    try:
        message_id = callback_query_or_message.message.message_id
    except:
        message_id = callback_query_or_message.message_id

    try:
        for i in range(2):
            await callback_query_or_message.bot.delete_message(
                callback_query_or_message.from_user.id,
                message_id - i
            )
    except:
        pass

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ excel_file_sended, —á—Ç–æ–±—ã –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await MyStates.excel_file_sended.set()

    # –°–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    button = button_creators.reply_keyboard_creator([[config['msg']['back'], config['msg']['main_menu']]])

    # –°–ø–µ—Ä–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏–º "–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü:", –ø–æ—Ç–æ–º excel —Ñ–∞–π–ª
    await callback_query_or_message.bot.send_message(
        callback_query_or_message.from_user.id,
        config['msg']['excel_month_report'],
        reply_markup=button
    )

    with open('excel_files/report1.xlsx', 'rb') as excel_file:
        # –û—Ç–ø—Ä–∞–≤–∏–º excel —Ñ–∞–π–ª
        await callback_query_or_message.bot.send_document(
            callback_query_or_message.from_user.id,
            excel_file
        )


def excel_creator(term):
    """
    –í–µ—Ä–Ω–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –≤–∏–¥–µ excel —Ñ–∞–π–ª–∞
    :param term:
    :return:
    """
    excel_file = excel_handler.excel_report_creator(term)
    return False



###
async def main_menu_inline_button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ inline –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    :param state:
    :param callback_query:
    :return:
    """
    # –£–¥–∞–ª—è–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for i in range(2):
            await callback_query.bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id - i
            )
    except:
        pass

    # –í–µ—Ä–Ω–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu(callback_query, state)


###
def calc_presence_time(user_id, day):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤(timedelta) —Ä–∞–±–æ—á–∏–π –±—ã–ª –Ω–∞ —Ä–∞–±–æ—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–Ω–µ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ timedelta —á—Ç–æ–±—ã
    :param user_id:
    :param day:
    :return: ("–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 2 —á–∞—Å–∞ 23–º–∏–Ω", datetime.timedelta(xxx))
    """
    # –ü–æ–ª—É—á–∏–º –≤—Å–µ in/out —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è: [(datetime.time(9, 6, 47), 'DeviceNo'), ...] –∏–ª–∏ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: []
    all_in_outs_one_day = sql_handler.get_all_in_outs_one_day(user_id, day)

    # –•–æ—Ç—è –≤ all_in_outs_one_day –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–µ —Å–ª—É—á–∞–∏ —Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
    if all_in_outs_one_day:

        in_device = config['device']['in_device']
        out_device = config['device']['out_device']

        in_time = 0
        # –¢—É—Ç —Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è
        day_presence_time_delta = datetime.timedelta()

        # –ï—Å–ª–∏ –≤ all_in_outs_one_day –µ—Å—Ç—å 2 in –∏ 2 out, –∑–Ω–∞—á–∏—Ç —Å–æ—Å—Ç–∞–≤–∏–º 2 —Å—Ç—Ä–æ–∫–∏: "in | out\n in | out"
        for i in all_in_outs_one_day:
            # –ï—Å–ª–∏ in_time –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –º—ã –æ–∂–∏–¥–∞–µ–º in_time.
            # !!! –ù–æ –∏–Ω–æ–≥–¥–∞ –ø–æ—Å–ª–µ in –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—è—Ç—å in –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª faceid
            if not in_time:
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ in_device –∫–æ–≥–¥–∞ in_time –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
                if i[1] == in_device:
                    in_time = i[0]
            # –ï—Å–ª–∏ in_time –Ω–µ –ø—É—Å—Ç –∑–Ω–∞—á–∏—Ç –º—ã –æ–∂–∏–¥–∞–µ–º out_time
            # !!! –ù–æ –∏–Ω–æ–≥–¥–∞ –ø–æ—Å–ª–µ out –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—è—Ç—å out –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª faceid
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ out_device –∫–æ–≥–¥–∞ in_time –Ω–µ –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
                if i[1] == out_device:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –±—ã–ª –≤–Ω—É—Ç—Ä–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏
                    in_time_delta = datetime.timedelta(hours=in_time.hour, minutes=in_time.minute,
                                                       seconds=in_time.second)
                    out_time_delta = datetime.timedelta(hours=i[0].hour, minutes=i[0].minute, seconds=i[0].second)
                    presence_time_delta = out_time_delta - in_time_delta
                    day_presence_time_delta += presence_time_delta

                    # –û–Ω—É–ª–∏—Ä—É–µ–º in_time
                    in_time = 0
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ in_device –∫–æ–≥–¥–∞ in_time –Ω–µ –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ –æ–ø—è—Ç—å –∏–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥ –∏ —É—Ö–æ–¥ –º–µ–∂–¥—É
                # –Ω–∏–º–∏ —É—Ç–µ—Ä–µ–Ω –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª faceid. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–∏ –º—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ day_presence_time
                else:
                    # –ó–∞–ø–∏—à–µ–º –≤—Ä–µ–º—è –≤ in_time —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü—ã–∫–ª–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è "if not in_time"
                    in_time = i[0]

        # –ò–∑ –¥–µ–ª—å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏–π
        day_presence_time = datetime.datetime.min + day_presence_time_delta

        # –í–º–µ—Å—Ç–æ "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 07:52" —Å–æ–∑–¥–∞–µ–º "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 7 —á–∞—Å–æ–≤ 52 –º–∏–Ω—É—Ç—ã"
        hour = str(day_presence_time.hour)
        minute = str(day_presence_time.minute)
        if hour == '0':
            time = f"{minute} –º–∏–Ω."
        else:
            time = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."
        # –°–æ—Å—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ: "–í—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 2 —á–∞—Å. 51 –º–∏–Ω."
        mesg = config['msg']['presence_time'] + ' ' + time

        return mesg, day_presence_time_delta
    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ—à–µ–ª –Ω–∏ —Ç–∞–∫, —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. –•–æ—Ç—è —Ç–∞–∫ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
    else:
        return config['msg']['presence_time'], datetime.timedelta()


###
def early_leave_check(time):
    """
    :param time:
    :return: –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É –≤—Ä–µ–º—è, –∞ –æ–Ω –∏—Å—Ö–æ–¥—è –∏–∑ end_hour –∏ end_minute –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω–µ —É—à–µ–ª –ª–∏ –æ–Ω —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    –ï—Å–ª–∏ —É—à–µ–ª –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–Ω—è —Ç–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ—Ç "–£—Ö–æ–¥: 19:01", –∞ –µ—Å–ª–∏ —É—à–µ–ª —Ä–∞–Ω—å—à–µ —Ç–æ–≥–¥–∞: "–£—Ö–æ–¥: 17:00:00 # –£—à–µ–ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏: 0:15"
    –ï—â–µ –≤–µ—Ä–Ω–µ—Ç early_seconds (–≤ –≤–∏–¥–µ timedelta) —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è
    –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç(early_time_delta) –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –≤–µ—Ä–Ω–µ—Ç —ç—Ç–æ timedelta, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞
    """
    early_time_delta = datetime.timedelta(0)

    # –ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —á—Ç–æ IN –µ—Å—Ç—å –∞ OUT –Ω–µ –±—ã–ª–æ. –í —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è –æ–Ω –≤–µ—Ä–Ω–µ—Ç "–ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö"
    if not time:
        return config['msg']['leaved'], early_time_delta

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç –æ–Ω —É—à–µ–ª —Ä–∞–Ω—å—à–µ
    end_time_delta = datetime.timedelta(
        hours=int(config['time']['end_hour']),
        minutes=int(config['time']['end_minute'])
    )
    leaved_time_delta = datetime.timedelta(
        hours=time.hour,
        minutes=time.minute,
        seconds=time.second
    )

    # –ï—Å–ª–∏ —É—à–µ–ª —Ä–∞–Ω—å—à–µ:
    if end_time_delta > leaved_time_delta:
        early_seconds = end_time_delta - leaved_time_delta
        early_time_hour = (datetime.datetime.min + early_seconds).time()

        # –í–º–µ—Å—Ç–æ "–†–∞–Ω–Ω–∏–π —É—Ö–æ–¥: 07:52" —Å–æ–∑–¥–∞–µ–º "–†–∞–Ω–Ω–∏–π —É—Ö–æ–¥: 7 —á–∞—Å–æ–≤ 52 –º–∏–Ω—É—Ç—ã"
        hour = str(early_time_hour.hour)
        minute = str(early_time_hour.minute)
        if hour == '0':
            early_leave_time = f"{minute} –º–∏–Ω."
        else:
            early_leave_time = f"{hour.lstrip('0')} —á–∞—Å. {minute} –º–∏–Ω."

        msg1 = config['msg']['leaved'] + ' ' + time.strftime("%H:%M")
        msg2 = config['msg']['early_leaved'] + ' ' + early_leave_time
        msg = msg1 + '#' + msg2

        early_time_delta = early_seconds

    else:
        msg = config['msg']['leaved'] + ' ' + time.strftime("%H:%M")

    return msg, early_time_delta


def register_handlers(dp: Dispatcher):
    # –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª –æ—Ç—á–µ—Ç(–æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    dp.register_message_handler(
        report_page_buttons,
        content_types=['text'],
        state=MyStates.waiting_report_page_buttons
    )

    # –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª inline –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è.
    dp.register_callback_query_handler(
        chosen_term_handler,
        lambda c: c.data == 'back',
        state=MyStates.waiting_report_page_buttons
    )

    # –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª –æ—Ç—á–µ—Ç(–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    dp.register_message_handler(
        all_workers_report_page_buttons,
        content_types=['text'],
        state=MyStates.all_workers_waiting_report_page_buttons
    )

    dp.register_message_handler(
        admin_command_handler,
        commands=['admin'],
        state='*'
    )

    dp.register_message_handler(
        check_password,
        content_types=['text'],
        state=MyStates.waiting_for_password
    )

    dp.register_message_handler(
        on_off_menu_handler,
        lambda message: message.text == config['msg']['on_off']
    )

    dp.register_callback_query_handler(
        on_off_buttons_handler,
        lambda c: c.data.startswith('notification_button')
    )

    dp.register_message_handler(
        missing_list_handler,
        lambda message: message.text == config['msg']['missing']
    )

    dp.register_message_handler(
        present_list_handler,
        lambda message: message.text == config['msg']['present']
    )

    dp.register_message_handler(
        report_menu,
        lambda message: message.text == config['msg']['report']
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    dp.register_callback_query_handler(
        one_worker_report_handler,
        lambda c: c.data == 'one_worker_report'
    )

    dp.register_message_handler(
        report_menu,
        lambda message: message.text == config['msg']['back'],
        state=MyStates.waiting_for_worker_number
    )

    dp.register_message_handler(
        choosen_worker_handler,
        content_types=['text'],
        state=MyStates.waiting_for_worker_number
    )

    dp.register_message_handler(
        chosen_term_handler,
        content_types=['text'],
        state=MyStates.waiting_for_term
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  ->  1 –ø—É–Ω–∫—Ç
    dp.register_callback_query_handler(
        come_leave_report_type_handler,
        lambda c: c.data == 'come_leave_report_type',
        state=MyStates.waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  ->  2 –ø—É–Ω–∫—Ç
    dp.register_callback_query_handler(
        late_report_type_handler,
        lambda c: c.data == 'late_report_type',
        state=MyStates.waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  ->  3 –ø—É–Ω–∫—Ç
    dp.register_callback_query_handler(
        early_leaved_report_type_handler,
        lambda c: c.data == 'early_leaved_report_type',
        state=MyStates.waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  ->  4 –ø—É–Ω–∫—Ç
    dp.register_callback_query_handler(
        missed_days_report_type_handler,
        lambda c: c.data == 'missed_days_report_type',
        state=MyStates.waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  ->  5 –ø—É–Ω–∫—Ç
    dp.register_callback_query_handler(
        presence_time_report_type_handler,
        lambda c: c.data == 'presence_time_report_type',
        state=MyStates.waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  ->  6 –ø—É–Ω–∫—Ç
    dp.register_callback_query_handler(
        geolocation_report_type_handler,
        lambda c: c.data == 'geolocation_report_type',
        state=MyStates.waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  ->  6 –ø—É–Ω–∫—Ç  -> –ö–∞–∫—É—é-—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞"
    dp.register_callback_query_handler(
        chosen_geolocation_day_handler,
        lambda c: c.data.startswith('location_button'),
        state=MyStates.waiting_report_page_buttons
    )

    # –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü—É—é, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–ø—è—Ç—å —Å–ø–∏—Å–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π
    dp.register_message_handler(
        geolocation_day_page_buttons,
        content_types=['text'],
        state=MyStates.waiting_for_location
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª üìã –û—Ç—á–µ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  ->  7 –ø—É–Ω–∫—Ç
    dp.register_callback_query_handler(
        all_data_report_type_handler,
        lambda c: c.data == 'all_data_report_type',
        state=MyStates.waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    dp.register_callback_query_handler(
        all_workers_report_handler,
        lambda c: c.data == 'all_workers_report'
    )

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" -> "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (1-30 –¥–Ω–µ–π):"
    dp.register_message_handler(
        all_workers_chosen_term_handler,
        content_types=['text'],
        state=MyStates.all_workers_waiting_for_term
    )

    # –ï—Å–ª–∏ –≤ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞" –Ω–∞–∂–∞–ª –Ω–∞ "–û–ø–æ–∑–¥–∞–Ω–∏–µ":
    dp.register_callback_query_handler(
        all_workers_late_report_type_handler,
        lambda c: c.data == 'all_workers_late_report_type',
        state=MyStates.all_workers_waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞" –Ω–∞–∂–∞–ª –Ω–∞ "–†–∞–Ω–Ω–∏–π —É—Ö–æ–¥":
    dp.register_callback_query_handler(
        all_workers_early_leaved_report_type_handler,
        lambda c: c.data == 'all_workers_early_leaved_report_type',
        state=MyStates.all_workers_waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞" –Ω–∞–∂–∞–ª –Ω–∞ "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏":
    dp.register_callback_query_handler(
        all_workers_missed_days_report_type_handler,
        lambda c: c.data == 'all_workers_missed_days_report_type',
        state=MyStates.all_workers_waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤ "üóÇ –û—Ç—á–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞" –Ω–∞–∂–∞–ª –Ω–∞ inline –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥, —Ç–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ–º "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (1-30 –¥–Ω–µ–π):"
    dp.register_callback_query_handler(
        all_workers_report_handler,
        lambda c: c.data == 'back',
        state=MyStates.all_workers_waiting_for_report_type
    )

    dp.register_callback_query_handler(
        chosen_term_handler,
        lambda c: c.data == 'back',
        state=MyStates.waiting_for_report_type
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "üìä –û—Ç—á–µ—Ç –≤ excel"
    dp.register_callback_query_handler(
        excel_report_type_handler,
        lambda c: c.data == 'excel_report'
    )


    dp.register_message_handler(
        main_menu,
        lambda message: message.text == config['msg']['main_menu'],
        state='*'
    )

    dp.register_callback_query_handler(
        main_menu_inline_button_handler,
        lambda c: c.data == 'main_menu',
        state='*'
    )

    # send_main_menu_to_all_admins –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã
    dp.register_message_handler(
        send_main_menu_to_all_admins,
        lambda message: message.text == 'secret0088',
        state='*'
    )
